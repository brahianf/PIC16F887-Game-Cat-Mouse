

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Sep 04 13:47:16 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og9 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 2.05
    27                           ; Generated 20/12/2018 GMT
    28                           ; 
    29                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0088                     	;# 
   100  0089                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  008F                     	;# 
   105  0090                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  0105                     	;# 
   124  0107                     	;# 
   125  0108                     	;# 
   126  0109                     	;# 
   127  010C                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  0185                     	;# 
   133  0187                     	;# 
   134  0188                     	;# 
   135  0189                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  0088                     	;# 
   178  0089                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  008F                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0098                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  0105                     	;# 
   202  0107                     	;# 
   203  0108                     	;# 
   204  0109                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0185                     	;# 
   211  0187                     	;# 
   212  0188                     	;# 
   213  0189                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216                           
   217                           	psect	idataBANK0
   218  006C                     __pidataBANK0:	
   219                           
   220                           ;initializer for _randx
   221  006C  3401               	retlw	1
   222  006D  3400               	retlw	0
   223  006E  3400               	retlw	0
   224  006F  3400               	retlw	0
   225                           
   226                           	psect	strings
   227  0003                     __pstrings:	
   228  0003                     stringtab:	
   229  0003                     __stringtab:	
   230                           
   231                           ;	String table - string pointers are 1 byte each
   232  0003  1BFF               	btfsc	btemp+1,7
   233  0004  280D               	ljmp	stringcode
   234  0005  1383               	bcf	3,7
   235  0006  187F               	btfsc	btemp+1,0
   236  0007  1783               	bsf	3,7
   237  0008  0800               	movf	0,w
   238  0009  0A84               	incf	4,f
   239  000A  1903               	skipnz
   240  000B  0AFF               	incf	btemp+1,f
   241  000C  0008               	return
   242  000D                     stringcode:	
   243  000D                     stringdir:	
   244  000D  3000               	movlw	high stringdir
   245  000E  008A               	movwf	10
   246  000F  0804               	movf	4,w
   247  0010  0A84               	incf	4,f
   248  0011  0782               	addwf	2,f
   249  0012                     __stringbase:	
   250  0012  3400               	retlw	0
   251  0013                     __end_of__stringtab:	
   252  0013                     _dpowers:	
   253  0013  3401               	retlw	1
   254  0014  3400               	retlw	0
   255  0015  340A               	retlw	10
   256  0016  3400               	retlw	0
   257  0017  3464               	retlw	100
   258  0018  3400               	retlw	0
   259  0019  34E8               	retlw	232
   260  001A  3403               	retlw	3
   261  001B  3410               	retlw	16
   262  001C  3427               	retlw	39
   263  001D                     __end_of_dpowers:	
   264  001D                     _hexpowers:	
   265  001D  3401               	retlw	1
   266  001E  3400               	retlw	0
   267  001F  3410               	retlw	16
   268  0020  3400               	retlw	0
   269  0021  3400               	retlw	0
   270  0022  3401               	retlw	1
   271  0023  3400               	retlw	0
   272  0024  3410               	retlw	16
   273  0025                     __end_of_hexpowers:	
   274  000E                     _TMR1	set	14
   275  000C                     _PIR1bits	set	12
   276  000B                     _INTCON	set	11
   277  0010                     _T1CON	set	16
   278  0006                     _PORTBbits	set	6
   279  002F                     _RA7	set	47
   280  0049                     _RE1	set	73
   281  0048                     _RE0	set	72
   282  008C                     _PIE1bits	set	140
   283  0089                     _TRISE	set	137
   284  0086                     _TRISB	set	134
   285  0086                     _TRISBbits	set	134
   286  0189                     _ANSELH	set	393
   287  0188                     _ANSEL	set	392
   288  0025                     STR_32:	
   289  0025  3430               	retlw	48	;'0'
   290  0026  3431               	retlw	49	;'1'
   291  0027  3432               	retlw	50	;'2'
   292  0028  3433               	retlw	51	;'3'
   293  0029  3434               	retlw	52	;'4'
   294  002A  3435               	retlw	53	;'5'
   295  002B  3436               	retlw	54	;'6'
   296  002C  3437               	retlw	55	;'7'
   297  002D  3438               	retlw	56	;'8'
   298  002E  3439               	retlw	57	;'9'
   299  002F  3461               	retlw	97	;'a'
   300  0030  3462               	retlw	98	;'b'
   301  0031  3463               	retlw	99	;'c'
   302  0032  3464               	retlw	100	;'d'
   303  0033  3465               	retlw	101	;'e'
   304  0034  3466               	retlw	102	;'f'
   305  0035  3400               	retlw	0
   306  0036                     STR_13:	
   307  0036  3456               	retlw	86	;'V'
   308  0037  3469               	retlw	105	;'i'
   309  0038  3464               	retlw	100	;'d'
   310  0039  3425               	retlw	37	;'%'
   311  003A  3430               	retlw	48	;'0'
   312  003B  3432               	retlw	50	;'2'
   313  003C  3464               	retlw	100	;'d'
   314  003D  3420               	retlw	32	;' '
   315  003E  3400               	retlw	0
   316  003F                     STR_30:	
   317  003F  3441               	retlw	65	;'A'
   318  0040  3474               	retlw	116	;'t'
   319  0041  3472               	retlw	114	;'r'
   320  0042  3425               	retlw	37	;'%'
   321  0043  3430               	retlw	48	;'0'
   322  0044  3432               	retlw	50	;'2'
   323  0045  3464               	retlw	100	;'d'
   324  0046  3420               	retlw	32	;' '
   325  0047  3400               	retlw	0
   326  0048                     STR_1:	
   327  0048  3456               	retlw	86	;'V'
   328  0049  3469               	retlw	105	;'i'
   329  004A  3464               	retlw	100	;'d'
   330  004B  3425               	retlw	37	;'%'
   331  004C  3430               	retlw	48	;'0'
   332  004D  3432               	retlw	50	;'2'
   333  004E  3464               	retlw	100	;'d'
   334  004F  3400               	retlw	0
   335  0050                     STR_31:	
   336  0050  3428               	retlw	40	;'('
   337  0051  346E               	retlw	110	;'n'
   338  0052  3475               	retlw	117	;'u'
   339  0053  346C               	retlw	108	;'l'
   340  0054  346C               	retlw	108	;'l'
   341  0055  3429               	retlw	41	;')'
   342  0056  3400               	retlw	0
   343  0057                     STR_2:	
   344  0057  3441               	retlw	65	;'A'
   345  0058  3474               	retlw	116	;'t'
   346  0059  3425               	retlw	37	;'%'
   347  005A  3430               	retlw	48	;'0'
   348  005B  3432               	retlw	50	;'2'
   349  005C  3464               	retlw	100	;'d'
   350  005D  3400               	retlw	0
   351  005E                     STR_12:	
   352  005E  344A               	retlw	74	;'J'
   353  005F  3475               	retlw	117	;'u'
   354  0060  3465               	retlw	101	;'e'
   355  0061  3467               	retlw	103	;'g'
   356  0062  346F               	retlw	111	;'o'
   357  0063  3400               	retlw	0
   358  0064                     STR_11:	
   359  0064  3446               	retlw	70	;'F'
   360  0065  3469               	retlw	105	;'i'
   361  0066  346E               	retlw	110	;'n'
   362  0067  3400               	retlw	0
   363  0068                     STR_3:	
   364  0068  3447               	retlw	71	;'G'
   365  0069  3400               	retlw	0
   366  006A                     STR_9:	
   367  006A  3452               	retlw	82	;'R'
   368  006B  3400               	retlw	0
   369  003E                     
   370                           ; #config settings
   371  0000                     
   372                           	psect	cinit
   373  07E6                     start_initialization:	
   374  07E6                     __initialization:	
   375                           
   376                           ; Initialize objects allocated to BANK0
   377  07E6  120A  118A  206C  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   378  07EB  00DC               	movwf	__pdataBANK0& (0+127)
   379  07EC  120A  118A  206D  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   380  07F1  00DD               	movwf	(__pdataBANK0+1)& (0+127)
   381  07F2  120A  118A  206E  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   382  07F7  00DE               	movwf	(__pdataBANK0+2)& (0+127)
   383  07F8  120A  118A  206F   	fcall	__pidataBANK0+3	;fetch initializer
   384  07FB  00DF               	movwf	(__pdataBANK0+3)& (0+127)
   385  07FC                     end_of_initialization:	
   386                           ;End of C runtime variable initialization code
   387                           
   388  07FC                     __end_of__initialization:	
   389  07FC  0183               	clrf	3
   390  07FD  120A  118A  293F   	ljmp	_main	;jump to C main() function
   391                           
   392                           	psect	dataBANK0
   393  005C                     __pdataBANK0:	
   394  005C                     _randx:	
   395  005C                     	ds	4
   396                           
   397                           	psect	cstackCOMMON
   398  0070                     __pcstackCOMMON:	
   399  0070                     ?_isdigit:	
   400  0070                     ?_Lcd_Cmd:	
   401                           ; 1 bit 
   402                           
   403  0070                     ??_Lcd_Cmd:	
   404                           ; 1 bytes @ 0x0
   405                           
   406  0070                     ?_Lcd_Chr_CP:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ??_Lcd_Chr_CP:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ??_isdigit:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_Lcd_Init:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_main:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?___bmul:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?___wmul:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?___lwdiv:	
   428                           ; 2 bytes @ 0x0
   429                           
   430  0070                     ?___lmul:	
   431                           ; 2 bytes @ 0x0
   432                           
   433  0070                     ___bmul@multiplicand:	
   434                           ; 4 bytes @ 0x0
   435                           
   436  0070                     _isdigit$643:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ___wmul@multiplier:	
   440                           ; 1 bytes @ 0x0
   441                           
   442  0070                     ___lwdiv@divisor:	
   443                           ; 2 bytes @ 0x0
   444                           
   445  0070                     ___lmul@multiplier:	
   446                           ; 2 bytes @ 0x0
   447                           
   448                           
   449                           ; 4 bytes @ 0x0
   450  0070                     	ds	1
   451  0071                     ??___bmul:	
   452  0071                     isdigit@c:	
   453                           ; 1 bytes @ 0x1
   454                           
   455                           
   456                           ; 1 bytes @ 0x1
   457  0071                     	ds	1
   458  0072                     Lcd_Chr_CP@data:	
   459  0072                     Lcd_Cmd@data:	
   460                           ; 1 bytes @ 0x2
   461                           
   462  0072                     ___bmul@product:	
   463                           ; 1 bytes @ 0x2
   464                           
   465  0072                     ___wmul@multiplicand:	
   466                           ; 1 bytes @ 0x2
   467                           
   468  0072                     ___lwdiv@dividend:	
   469                           ; 2 bytes @ 0x2
   470                           
   471                           
   472                           ; 2 bytes @ 0x2
   473  0072                     	ds	1
   474  0073                     ??_Lcd_Init:	
   475  0073                     ?_Lcd_Out2:	
   476                           ; 1 bytes @ 0x3
   477                           
   478  0073                     Lcd_Out2@x:	
   479                           ; 1 bytes @ 0x3
   480                           
   481  0073                     ___bmul@multiplier:	
   482                           ; 1 bytes @ 0x3
   483                           
   484                           
   485                           ; 1 bytes @ 0x3
   486  0073                     	ds	1
   487  0074                     ??___wmul:	
   488  0074                     ??___lwdiv:	
   489                           ; 1 bytes @ 0x4
   490                           
   491  0074                     Lcd_Out2@buffer:	
   492                           ; 1 bytes @ 0x4
   493                           
   494  0074                     ___wmul@product:	
   495                           ; 1 bytes @ 0x4
   496                           
   497  0074                     ___lmul@multiplicand:	
   498                           ; 2 bytes @ 0x4
   499                           
   500                           
   501                           ; 4 bytes @ 0x4
   502  0074                     	ds	1
   503  0075                     ??_Lcd_Out2:	
   504  0075                     Lcd_Init@data:	
   505                           ; 1 bytes @ 0x5
   506                           
   507  0075                     ___lwdiv@quotient:	
   508                           ; 1 bytes @ 0x5
   509                           
   510                           
   511                           ; 2 bytes @ 0x5
   512  0075                     	ds	1
   513  0076                     Lcd_Out2@y:	
   514                           
   515                           ; 1 bytes @ 0x6
   516  0076                     	ds	1
   517  0077                     Lcd_Out2@data:	
   518  0077                     ___lwdiv@counter:	
   519                           ; 1 bytes @ 0x7
   520                           
   521                           
   522                           ; 1 bytes @ 0x7
   523  0077                     	ds	1
   524  0078                     ??___lmul:	
   525  0078                     ?___lwmod:	
   526                           ; 1 bytes @ 0x8
   527                           
   528  0078                     ___lwmod@divisor:	
   529                           ; 2 bytes @ 0x8
   530                           
   531                           
   532                           ; 2 bytes @ 0x8
   533  0078                     	ds	1
   534  0079                     ___lmul@product:	
   535                           
   536                           ; 4 bytes @ 0x9
   537  0079                     	ds	1
   538  007A                     ___lwmod@dividend:	
   539                           
   540                           ; 2 bytes @ 0xA
   541  007A                     	ds	2
   542  007C                     ??___lwmod:	
   543                           
   544                           ; 1 bytes @ 0xC
   545  007C                     	ds	1
   546  007D                     ??___awmod:	
   547  007D                     ___lwmod@counter:	
   548                           ; 1 bytes @ 0xD
   549                           
   550                           
   551                           ; 1 bytes @ 0xD
   552  007D                     	ds	1
   553                           
   554                           	psect	cstackBANK0
   555  0020                     __pcstackBANK0:	
   556  0020                     ?_rand:	
   557  0020                     ?_sprintf:	
   558                           ; 2 bytes @ 0x0
   559                           
   560  0020                     sprintf@f:	
   561                           ; 2 bytes @ 0x0
   562                           
   563                           
   564                           ; 1 bytes @ 0x0
   565  0020                     	ds	2
   566  0022                     ??_rand:	
   567                           
   568                           ; 1 bytes @ 0x2
   569  0022                     	ds	1
   570  0023                     ??_sprintf:	
   571                           
   572                           ; 1 bytes @ 0x3
   573  0023                     	ds	3
   574  0026                     sprintf@idx:	
   575                           
   576                           ; 1 bytes @ 0x6
   577  0026                     	ds	1
   578  0027                     ?___awmod:	
   579  0027                     sprintf@cp:	
   580                           ; 2 bytes @ 0x7
   581                           
   582  0027                     ___awmod@divisor:	
   583                           ; 2 bytes @ 0x7
   584                           
   585                           
   586                           ; 2 bytes @ 0x7
   587  0027                     	ds	2
   588  0029                     sprintf@ap:	
   589  0029                     ___awmod@dividend:	
   590                           ; 1 bytes @ 0x9
   591                           
   592                           
   593                           ; 2 bytes @ 0x9
   594  0029                     	ds	1
   595  002A                     sprintf@len:	
   596                           
   597                           ; 2 bytes @ 0xA
   598  002A                     	ds	1
   599  002B                     ___awmod@counter:	
   600                           
   601                           ; 1 bytes @ 0xB
   602  002B                     	ds	1
   603  002C                     ___awmod@sign:	
   604  002C                     sprintf@val:	
   605                           ; 1 bytes @ 0xC
   606                           
   607                           
   608                           ; 2 bytes @ 0xC
   609  002C                     	ds	2
   610  002E                     sprintf@prec:	
   611                           
   612                           ; 1 bytes @ 0xE
   613  002E                     	ds	1
   614  002F                     sprintf@flag:	
   615                           
   616                           ; 2 bytes @ 0xF
   617  002F                     	ds	2
   618  0031                     sprintf@width:	
   619                           
   620                           ; 2 bytes @ 0x11
   621  0031                     	ds	2
   622  0033                     sprintf@c:	
   623                           
   624                           ; 1 bytes @ 0x13
   625  0033                     	ds	1
   626  0034                     sprintf@sp:	
   627                           
   628                           ; 1 bytes @ 0x14
   629  0034                     	ds	1
   630  0035                     ??_main:	
   631                           
   632                           ; 1 bytes @ 0x15
   633  0035                     	ds	3
   634  0038                     main@AuxPosAnteriorRat:	
   635                           
   636                           ; 2 bytes @ 0x18
   637  0038                     	ds	2
   638  003A                     main@var:	
   639                           
   640                           ; 2 bytes @ 0x1A
   641  003A                     	ds	2
   642  003C                     main@iconVidas:	
   643                           
   644                           ; 8 bytes @ 0x1C
   645  003C                     	ds	8
   646  0044                     main@atrapado:	
   647                           
   648                           ; 2 bytes @ 0x24
   649  0044                     	ds	2
   650  0046                     main@jumpRat:	
   651                           
   652                           ; 2 bytes @ 0x26
   653  0046                     	ds	2
   654  0048                     main@iconAtrapado:	
   655                           
   656                           ; 3 bytes @ 0x28
   657  0048                     	ds	3
   658  004B                     main@vidasGat:	
   659                           
   660                           ; 2 bytes @ 0x2B
   661  004B                     	ds	2
   662  004D                     main@AuxPosAnteriorGat:	
   663                           
   664                           ; 2 bytes @ 0x2D
   665  004D                     	ds	2
   666  004F                     main@imagenRaton:	
   667                           
   668                           ; 3 bytes @ 0x2F
   669  004F                     	ds	3
   670  0052                     main@blanco:	
   671                           
   672                           ; 3 bytes @ 0x32
   673  0052                     	ds	3
   674  0055                     main@imagenGato:	
   675                           
   676                           ; 3 bytes @ 0x35
   677  0055                     	ds	3
   678  0058                     main@posRat:	
   679                           
   680                           ; 2 bytes @ 0x38
   681  0058                     	ds	2
   682  005A                     main@posGat:	
   683                           
   684                           ; 2 bytes @ 0x3A
   685  005A                     	ds	2
   686                           
   687                           	psect	maintext
   688  013F                     __pmaintext:	
   689 ;;
   690 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   691 ;;
   692 ;; *************** function _main *****************
   693 ;; Defined at:
   694 ;;		line 29 in file "Game.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  iconVidas       8   28[BANK0 ] unsigned char [8]
   699 ;;  imagenGato      3   53[BANK0 ] unsigned char [3]
   700 ;;  blanco          3   50[BANK0 ] unsigned char [3]
   701 ;;  imagenRaton     3   47[BANK0 ] unsigned char [3]
   702 ;;  iconAtrapado    3   40[BANK0 ] unsigned char [3]
   703 ;;  posGat          2   58[BANK0 ] int 
   704 ;;  posRat          2   56[BANK0 ] int 
   705 ;;  AuxPosAnteri    2   45[BANK0 ] int 
   706 ;;  vidasGat        2   43[BANK0 ] int 
   707 ;;  jumpRat         2   38[BANK0 ] int 
   708 ;;  atrapado        2   36[BANK0 ] int 
   709 ;;  var             2   26[BANK0 ] unsigned int 
   710 ;;  AuxPosAnteri    2   24[BANK0 ] int 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : B00/0
   717 ;;		On exit  : 800/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   720 ;;      Params:         0       0       0       0       0
   721 ;;      Locals:         0      36       0       0       0
   722 ;;      Temps:          0       3       0       0       0
   723 ;;      Totals:         0      39       0       0       0
   724 ;;Total ram usage:       39 bytes
   725 ;; Hardware stack levels required when called:    2
   726 ;; This function calls:
   727 ;;		_Lcd_Cmd
   728 ;;		_Lcd_Init
   729 ;;		_Lcd_Out2
   730 ;;		___awmod
   731 ;;		_rand
   732 ;;		_sprintf
   733 ;; This function is called by:
   734 ;;		Startup code after reset
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           
   739                           ;psect for function _main
   740  013F                     _main:	
   741                           
   742                           ;Game.c: 31: unsigned char iconVidas[8];;Game.c: 32: unsigned char iconAtrapado[3];;Game
      +                          .c: 34: unsigned char imagenGato[3];;Game.c: 35: unsigned char imagenRaton[3];;Game.c: 3
      +                          6: unsigned char blanco[3];;Game.c: 39: int jumpRat=0;
   743                           
   744                           ;incstack = 0
   745                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   746  013F  01C6               	clrf	main@jumpRat
   747  0140  01C7               	clrf	main@jumpRat+1
   748                           
   749                           ;Game.c: 40: int vidasGat=7;
   750  0141  3007               	movlw	7
   751  0142  00CB               	movwf	main@vidasGat
   752  0143  3000               	movlw	0
   753  0144  00CC               	movwf	main@vidasGat+1
   754                           
   755                           ;Game.c: 41: int atrapado=0;
   756  0145  01C4               	clrf	main@atrapado
   757  0146  01C5               	clrf	main@atrapado+1
   758                           
   759                           ;Game.c: 43: int AuxPosAnteriorRat;;Game.c: 44: int AuxPosAnteriorGat;;Game.c: 46: unsig
      +                          ned int var=2000;
   760  0147  30D0               	movlw	208
   761  0148  00BA               	movwf	main@var
   762  0149  3007               	movlw	7
   763  014A  00BB               	movwf	main@var+1
   764                           
   765                           ;Game.c: 48: int posRat;;Game.c: 49: int posGat=rand()%(10)+4;
   766  014B  300A               	movlw	10
   767  014C  00A7               	movwf	___awmod@divisor
   768  014D  3000               	movlw	0
   769  014E  00A8               	movwf	___awmod@divisor+1
   770  014F  120A  158A  2626  120A  118A  	fcall	_rand
   771  0154  0821               	movf	?_rand+1,w
   772  0155  00AA               	movwf	___awmod@dividend+1
   773  0156  0820               	movf	?_rand,w
   774  0157  00A9               	movwf	___awmod@dividend
   775  0158  120A  158A  2669  120A  118A  	fcall	___awmod
   776  015D  0827               	movf	?___awmod,w
   777  015E  3E04               	addlw	4
   778  015F  00DA               	movwf	main@posGat
   779  0160  0828               	movf	?___awmod+1,w
   780  0161  1803               	skipnc
   781  0162  3E01               	addlw	1
   782  0163  3E00               	addlw	0
   783  0164  00DB               	movwf	main@posGat+1
   784                           
   785                           ;Game.c: 54: ANSEL=0;
   786  0165  1683               	bsf	3,5	;RP0=1, select bank3
   787  0166  1703               	bsf	3,6	;RP1=1, select bank3
   788  0167  0188               	clrf	8	;volatile
   789                           
   790                           ;Game.c: 55: ANSELH=0;
   791  0168  0189               	clrf	9	;volatile
   792                           
   793                           ;Game.c: 57: TRISB=0x00;
   794  0169  1303               	bcf	3,6	;RP1=0, select bank1
   795  016A  0186               	clrf	6	;volatile
   796                           
   797                           ;Game.c: 59: TRISE=0b00000011;
   798  016B  3003               	movlw	3
   799  016C  0089               	movwf	9	;volatile
   800                           
   801                           ;Game.c: 61: T1CON=0b00110001;
   802  016D  3031               	movlw	49
   803  016E  1283               	bcf	3,5	;RP0=0, select bank0
   804  016F  0090               	movwf	16	;volatile
   805                           
   806                           ;Game.c: 62: INTCON=0b11000000;
   807  0170  30C0               	movlw	192
   808  0171  008B               	movwf	11	;volatile
   809                           
   810                           ;Game.c: 64: PIE1bits.TMR1IE=1;
   811  0172  1683               	bsf	3,5	;RP0=1, select bank1
   812  0173  140C               	bsf	12,0	;volatile
   813                           
   814                           ;Game.c: 65: PIR1bits.TMR1IF=0;
   815  0174  1283               	bcf	3,5	;RP0=0, select bank0
   816  0175  100C               	bcf	12,0	;volatile
   817                           
   818                           ;Game.c: 67: TMR1=2000;
   819  0176  3007               	movlw	7
   820  0177  008F               	movwf	15	;volatile
   821  0178  30D0               	movlw	208
   822  0179  008E               	movwf	14	;volatile
   823                           
   824                           ;Game.c: 69: Lcd_Init();
   825  017A  120A  158A  26B4  120A  118A  	fcall	_Lcd_Init
   826                           
   827                           ;Game.c: 70: Lcd_Cmd(1);
   828  017F  3001               	movlw	1
   829  0180  120A  158A  2755  120A  118A  	fcall	_Lcd_Cmd
   830                           
   831                           ;Game.c: 71: Lcd_Cmd(12);
   832  0185  300C               	movlw	12
   833  0186  120A  158A  2755  120A  118A  	fcall	_Lcd_Cmd
   834                           
   835                           ;Game.c: 72: _delay((unsigned long)((100)*(4000000/4000.0)));
   836  018B  3082               	movlw	130
   837  018C  1283               	bcf	3,5	;RP0=0, select bank0
   838  018D  1303               	bcf	3,6	;RP1=0, select bank0
   839  018E  00B6               	movwf	??_main+1
   840  018F  30DD               	movlw	221
   841  0190  00B5               	movwf	??_main
   842  0191                     u2137:	
   843  0191  0BB5               	decfsz	??_main,f
   844  0192  2991               	goto	u2137
   845  0193  0BB6               	decfsz	??_main+1,f
   846  0194  2991               	goto	u2137
   847                           
   848                           ;Game.c: 74: sprintf(iconVidas,"Vid%02d",vidasGat);
   849  0195  3036               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   850  0196  1283               	bcf	3,5	;RP0=0, select bank0
   851  0197  1303               	bcf	3,6	;RP1=0, select bank0
   852  0198  00B5               	movwf	??_main
   853  0199  0835               	movf	??_main,w
   854  019A  00A0               	movwf	sprintf@f
   855  019B  3007               	movlw	7
   856  019C  00A1               	movwf	?_sprintf+1
   857  019D  3000               	movlw	0
   858  019E  00A2               	movwf	?_sprintf+2
   859  019F  303C               	movlw	(low (main@iconVidas| 0))& (0+255)
   860  01A0  120A  118A  246E  120A  118A  	fcall	_sprintf
   861                           
   862                           ;Game.c: 75: Lcd_Out2(2,10,iconVidas);
   863  01A5  300A               	movlw	10
   864  01A6  00B5               	movwf	??_main
   865  01A7  0835               	movf	??_main,w
   866  01A8  00F3               	movwf	Lcd_Out2@x
   867  01A9  303C               	movlw	(low (main@iconVidas| 0))& (0+255)
   868  01AA  00B6               	movwf	??_main+1
   869  01AB  0836               	movf	??_main+1,w
   870  01AC  00F4               	movwf	Lcd_Out2@buffer
   871  01AD  3002               	movlw	2
   872  01AE  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
   873                           
   874                           ;Game.c: 77: sprintf(iconAtrapado,"At%02d",atrapado);
   875  01B3  3045               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   876  01B4  1283               	bcf	3,5	;RP0=0, select bank0
   877  01B5  1303               	bcf	3,6	;RP1=0, select bank0
   878  01B6  00B5               	movwf	??_main
   879  01B7  0835               	movf	??_main,w
   880  01B8  00A0               	movwf	sprintf@f
   881  01B9  3000               	movlw	0
   882  01BA  00A1               	movwf	?_sprintf+1
   883  01BB  00A2               	movwf	?_sprintf+2
   884  01BC  3048               	movlw	(low (main@iconAtrapado| 0))& (0+255)
   885  01BD  120A  118A  246E  120A  118A  	fcall	_sprintf
   886                           
   887                           ;Game.c: 78: Lcd_Out2(2,0,iconAtrapado);
   888  01C2  01F3               	clrf	Lcd_Out2@x
   889  01C3  3048               	movlw	(low (main@iconAtrapado| 0))& (0+255)
   890  01C4  00B5               	movwf	??_main
   891  01C5  0835               	movf	??_main,w
   892  01C6  00F4               	movwf	Lcd_Out2@buffer
   893  01C7  3002               	movlw	2
   894  01C8  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
   895                           
   896                           ;Game.c: 80: sprintf(imagenGato,"G","");
   897  01CD  3056               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   898  01CE  1283               	bcf	3,5	;RP0=0, select bank0
   899  01CF  1303               	bcf	3,6	;RP1=0, select bank0
   900  01D0  00B5               	movwf	??_main
   901  01D1  0835               	movf	??_main,w
   902  01D2  00A0               	movwf	sprintf@f
   903  01D3  302C               	movlw	(low (((STR_13+8)-__stringbase)| (0+32768)))& (0+255)
   904  01D4  00A1               	movwf	low ((?_sprintf| 0+1))
   905  01D5  3080               	movlw	128
   906  01D6  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
   907  01D7  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
   908  01D8  120A  118A  246E  120A  118A  	fcall	_sprintf
   909                           
   910                           ;Game.c: 81: Lcd_Out2(1,posGat,imagenGato);
   911  01DD  085A               	movf	main@posGat,w
   912  01DE  00B5               	movwf	??_main
   913  01DF  0835               	movf	??_main,w
   914  01E0  00F3               	movwf	Lcd_Out2@x
   915  01E1  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
   916  01E2  00B6               	movwf	??_main+1
   917  01E3  0836               	movf	??_main+1,w
   918  01E4  00F4               	movwf	Lcd_Out2@buffer
   919  01E5  3001               	movlw	1
   920  01E6                     L1:	
   921  01E6  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
   922  01EB                     l80:	
   923                           ;Game.c: 84: while(1){
   924                           
   925  01EB  0064               	clrwdt	;# 
   926                           
   927                           ;Game.c: 88: if(PIR1bits.TMR1IF==1){
   928  01EC  1283               	bcf	3,5	;RP0=0, select bank0
   929  01ED  1303               	bcf	3,6	;RP1=0, select bank0
   930  01EE  1C0C               	btfss	12,0	;volatile
   931  01EF  2AE5               	goto	l2006
   932                           
   933                           ;Game.c: 90: sprintf(blanco," "," ");
   934  01F0  302B               	movlw	(low (((STR_13+7)-__stringbase)| (0+32768)))& (0+255)
   935  01F1  00B5               	movwf	??_main
   936  01F2  0835               	movf	??_main,w
   937  01F3  00A0               	movwf	sprintf@f
   938  01F4  302B               	movlw	(low (((STR_13+7)-__stringbase)| (0+32768)))& (0+255)
   939  01F5  00A1               	movwf	low ((?_sprintf| 0+1))
   940  01F6  3080               	movlw	128
   941  01F7  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
   942  01F8  3052               	movlw	(low (main@blanco| 0))& (0+255)
   943  01F9  120A  118A  246E  120A  118A  	fcall	_sprintf
   944                           
   945                           ;Game.c: 91: Lcd_Out2(1,AuxPosAnteriorRat,blanco);
   946  01FE  0838               	movf	main@AuxPosAnteriorRat,w
   947  01FF  00B5               	movwf	??_main
   948  0200  0835               	movf	??_main,w
   949  0201  00F3               	movwf	Lcd_Out2@x
   950  0202  3052               	movlw	(low (main@blanco| 0))& (0+255)
   951  0203  00B6               	movwf	??_main+1
   952  0204  0836               	movf	??_main+1,w
   953  0205  00F4               	movwf	Lcd_Out2@buffer
   954  0206  3001               	movlw	1
   955  0207  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
   956                           
   957                           ;Game.c: 92: TMR1=var;
   958  020C  1283               	bcf	3,5	;RP0=0, select bank0
   959  020D  1303               	bcf	3,6	;RP1=0, select bank0
   960  020E  083B               	movf	main@var+1,w
   961  020F  008F               	movwf	15	;volatile
   962  0210  083A               	movf	main@var,w
   963  0211  008E               	movwf	14	;volatile
   964                           
   965                           ;Game.c: 93: PIR1bits.TMR1IF=0;
   966  0212  100C               	bcf	12,0	;volatile
   967  0213                     l1970:	
   968                           
   969                           ;Game.c: 97: posRat= rand()%(10)+4;
   970  0213  300A               	movlw	10
   971  0214  00A7               	movwf	___awmod@divisor
   972  0215  3000               	movlw	0
   973  0216  00A8               	movwf	___awmod@divisor+1
   974  0217  120A  158A  2626  120A  118A  	fcall	_rand
   975  021C  0821               	movf	?_rand+1,w
   976  021D  00AA               	movwf	___awmod@dividend+1
   977  021E  0820               	movf	?_rand,w
   978  021F  00A9               	movwf	___awmod@dividend
   979  0220  120A  158A  2669  120A  118A  	fcall	___awmod
   980  0225  0827               	movf	?___awmod,w
   981  0226  3E04               	addlw	4
   982  0227  00D8               	movwf	main@posRat
   983  0228  0828               	movf	?___awmod+1,w
   984  0229  1803               	skipnc
   985  022A  3E01               	addlw	1
   986  022B  3E00               	addlw	0
   987  022C  00D9               	movwf	main@posRat+1
   988                           
   989                           ;Game.c: 98: Lcd_Out2(1,posRat,imagenRaton);
   990  022D  0858               	movf	main@posRat,w
   991  022E  00B5               	movwf	??_main
   992  022F  0835               	movf	??_main,w
   993  0230  00F3               	movwf	Lcd_Out2@x
   994  0231  304F               	movlw	(low (main@imagenRaton| 0))& (0+255)
   995  0232  00B6               	movwf	??_main+1
   996  0233  0836               	movf	??_main+1,w
   997  0234  00F4               	movwf	Lcd_Out2@buffer
   998  0235  3001               	movlw	1
   999  0236  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1000                           
  1001                           ;Game.c: 100: }while(posRat==posGat);
  1002  023B  1283               	bcf	3,5	;RP0=0, select bank0
  1003  023C  1303               	bcf	3,6	;RP1=0, select bank0
  1004  023D  085B               	movf	main@posGat+1,w
  1005  023E  0659               	xorwf	main@posRat+1,w
  1006  023F  1D03               	skipz
  1007  0240  2A43               	goto	u2025
  1008  0241  085A               	movf	main@posGat,w
  1009  0242  0658               	xorwf	main@posRat,w
  1010  0243                     u2025:	
  1011  0243  1903               	skipnz
  1012  0244  2A13               	goto	l1970
  1013                           
  1014                           ;Game.c: 102: AuxPosAnteriorRat=posRat;
  1015  0245  0859               	movf	main@posRat+1,w
  1016  0246  00B9               	movwf	main@AuxPosAnteriorRat+1
  1017  0247  0858               	movf	main@posRat,w
  1018  0248  00B8               	movwf	main@AuxPosAnteriorRat
  1019                           
  1020                           ;Game.c: 103: jumpRat++;
  1021  0249  3001               	movlw	1
  1022  024A  07C6               	addwf	main@jumpRat,f
  1023  024B  1803               	skipnc
  1024  024C  0AC7               	incf	main@jumpRat+1,f
  1025  024D  3000               	movlw	0
  1026  024E  07C7               	addwf	main@jumpRat+1,f
  1027                           
  1028                           ;Game.c: 104: sprintf(imagenGato,"G","");
  1029  024F  3056               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1030  0250  00B5               	movwf	??_main
  1031  0251  0835               	movf	??_main,w
  1032  0252  00A0               	movwf	sprintf@f
  1033  0253  302C               	movlw	(low (((STR_13+8)-__stringbase)| (0+32768)))& (0+255)
  1034  0254  00A1               	movwf	low ((?_sprintf| 0+1))
  1035  0255  3080               	movlw	128
  1036  0256  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1037  0257  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
  1038  0258  120A  118A  246E  120A  118A  	fcall	_sprintf
  1039                           
  1040                           ;Game.c: 105: Lcd_Out2(1,posGat,imagenGato);
  1041  025D  085A               	movf	main@posGat,w
  1042  025E  00B5               	movwf	??_main
  1043  025F  0835               	movf	??_main,w
  1044  0260  00F3               	movwf	Lcd_Out2@x
  1045  0261  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
  1046  0262  00B6               	movwf	??_main+1
  1047  0263  0836               	movf	??_main+1,w
  1048  0264  00F4               	movwf	Lcd_Out2@buffer
  1049  0265  3001               	movlw	1
  1050  0266  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1051                           
  1052                           ;Game.c: 106: sprintf(imagenRaton,"R","");
  1053  026B  3058               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1054  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1055  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1056  026E  00B5               	movwf	??_main
  1057  026F  0835               	movf	??_main,w
  1058  0270  00A0               	movwf	sprintf@f
  1059  0271  302C               	movlw	(low (((STR_13+8)-__stringbase)| (0+32768)))& (0+255)
  1060  0272  00A1               	movwf	low ((?_sprintf| 0+1))
  1061  0273  3080               	movlw	128
  1062  0274  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1063  0275  304F               	movlw	(low (main@imagenRaton| 0))& (0+255)
  1064  0276  120A  118A  246E  120A  118A  	fcall	_sprintf
  1065                           
  1066                           ;Game.c: 107: Lcd_Out2(1,posRat,imagenRaton);
  1067  027B  0858               	movf	main@posRat,w
  1068  027C  00B5               	movwf	??_main
  1069  027D  0835               	movf	??_main,w
  1070  027E  00F3               	movwf	Lcd_Out2@x
  1071  027F  304F               	movlw	(low (main@imagenRaton| 0))& (0+255)
  1072  0280  00B6               	movwf	??_main+1
  1073  0281  0836               	movf	??_main+1,w
  1074  0282  00F4               	movwf	Lcd_Out2@buffer
  1075  0283  3001               	movlw	1
  1076  0284  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1077                           
  1078                           ;Game.c: 109: if(jumpRat>3){
  1079  0289  1283               	bcf	3,5	;RP0=0, select bank0
  1080  028A  1303               	bcf	3,6	;RP1=0, select bank0
  1081  028B  0847               	movf	main@jumpRat+1,w
  1082  028C  3A80               	xorlw	128
  1083  028D  00FF               	movwf	127
  1084  028E  3080               	movlw	128
  1085  028F  027F               	subwf	127,w
  1086  0290  1D03               	skipz
  1087  0291  2A94               	goto	u2035
  1088  0292  3004               	movlw	4
  1089  0293  0246               	subwf	main@jumpRat,w
  1090  0294                     u2035:	
  1091  0294  1C03               	skipc
  1092  0295  2A9A               	goto	l1990
  1093                           
  1094                           ;Game.c: 110: jumpRat=0;
  1095  0296  1283               	bcf	3,5	;RP0=0, select bank0
  1096  0297  1303               	bcf	3,6	;RP1=0, select bank0
  1097  0298  01C6               	clrf	main@jumpRat
  1098  0299  01C7               	clrf	main@jumpRat+1
  1099  029A                     l1990:	
  1100                           
  1101                           ;Game.c: 111: };Game.c: 113: if(jumpRat==3){
  1102  029A  3003               	movlw	3
  1103  029B  1283               	bcf	3,5	;RP0=0, select bank0
  1104  029C  1303               	bcf	3,6	;RP1=0, select bank0
  1105  029D  0646               	xorwf	main@jumpRat,w
  1106  029E  0447               	iorwf	main@jumpRat+1,w
  1107  029F  1D03               	btfss	3,2
  1108  02A0  2AA7               	goto	l1994
  1109                           
  1110                           ;Game.c: 114: vidasGat--;
  1111  02A1  30FF               	movlw	255
  1112  02A2  07CB               	addwf	main@vidasGat,f
  1113  02A3  1803               	skipnc
  1114  02A4  0ACC               	incf	main@vidasGat+1,f
  1115  02A5  30FF               	movlw	255
  1116  02A6  07CC               	addwf	main@vidasGat+1,f
  1117  02A7                     l1994:	
  1118                           
  1119                           ;Game.c: 115: };Game.c: 116: if(vidasGat<0){
  1120  02A7  1FCC               	btfss	main@vidasGat+1,7
  1121  02A8  2AC7               	goto	l2002
  1122                           
  1123                           ;Game.c: 117: vidasGat=0;
  1124  02A9  01CB               	clrf	main@vidasGat
  1125  02AA  01CC               	clrf	main@vidasGat+1
  1126                           
  1127                           ;Game.c: 118: sprintf(iconVidas,"Fin","Juego");
  1128  02AB  3052               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1129  02AC  00B5               	movwf	??_main
  1130  02AD  0835               	movf	??_main,w
  1131  02AE  00A0               	movwf	sprintf@f
  1132  02AF  304C               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1133  02B0  00A1               	movwf	low ((?_sprintf| 0+1))
  1134  02B1  3080               	movlw	128
  1135  02B2  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1136  02B3  303C               	movlw	(low (main@iconVidas| 0))& (0+255)
  1137  02B4  120A  118A  246E  120A  118A  	fcall	_sprintf
  1138                           
  1139                           ;Game.c: 119: Lcd_Out2(2,10,iconVidas);
  1140  02B9  300A               	movlw	10
  1141  02BA  00B5               	movwf	??_main
  1142  02BB  0835               	movf	??_main,w
  1143  02BC  00F3               	movwf	Lcd_Out2@x
  1144  02BD  303C               	movlw	(low (main@iconVidas| 0))& (0+255)
  1145  02BE  00B6               	movwf	??_main+1
  1146  02BF  0836               	movf	??_main+1,w
  1147  02C0  00F4               	movwf	Lcd_Out2@buffer
  1148  02C1  3002               	movlw	2
  1149  02C2  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1150  02C7                     l2002:	
  1151                           
  1152                           ;Game.c: 121: };Game.c: 123: sprintf(iconVidas,"Vid%02d ",vidasGat);
  1153  02C7  3024               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1154  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  1155  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  1156  02CA  00B5               	movwf	??_main
  1157  02CB  0835               	movf	??_main,w
  1158  02CC  00A0               	movwf	sprintf@f
  1159  02CD  084C               	movf	main@vidasGat+1,w
  1160  02CE  00A2               	movwf	?_sprintf+2
  1161  02CF  084B               	movf	main@vidasGat,w
  1162  02D0  00A1               	movwf	?_sprintf+1
  1163  02D1  303C               	movlw	(low (main@iconVidas| 0))& (0+255)
  1164  02D2  120A  118A  246E  120A  118A  	fcall	_sprintf
  1165                           
  1166                           ;Game.c: 124: Lcd_Out2(2,10,iconVidas);
  1167  02D7  300A               	movlw	10
  1168  02D8  00B5               	movwf	??_main
  1169  02D9  0835               	movf	??_main,w
  1170  02DA  00F3               	movwf	Lcd_Out2@x
  1171  02DB  303C               	movlw	(low (main@iconVidas| 0))& (0+255)
  1172  02DC  00B6               	movwf	??_main+1
  1173  02DD  0836               	movf	??_main+1,w
  1174  02DE  00F4               	movwf	Lcd_Out2@buffer
  1175  02DF  3002               	movlw	2
  1176  02E0  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1177  02E5                     l2006:	
  1178                           
  1179                           ;Game.c: 127: };Game.c: 130: if(RE0==1){
  1180  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  1181  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  1182  02E7  1C09               	btfss	9,0	;volatile
  1183  02E8  2B62               	goto	l2030
  1184  02E9                     l88:	
  1185  02E9  1809               	btfsc	9,0	;volatile
  1186  02EA  2AE9               	goto	l88
  1187                           
  1188                           ;Game.c: 133: AuxPosAnteriorGat=posGat;
  1189  02EB  085B               	movf	main@posGat+1,w
  1190  02EC  00CE               	movwf	main@AuxPosAnteriorGat+1
  1191  02ED  085A               	movf	main@posGat,w
  1192  02EE  00CD               	movwf	main@AuxPosAnteriorGat
  1193                           
  1194                           ;Game.c: 134: sprintf(blanco," "," ");
  1195  02EF  302B               	movlw	(low (((STR_13+7)-__stringbase)| (0+32768)))& (0+255)
  1196  02F0  00B5               	movwf	??_main
  1197  02F1  0835               	movf	??_main,w
  1198  02F2  00A0               	movwf	sprintf@f
  1199  02F3  302B               	movlw	(low (((STR_13+7)-__stringbase)| (0+32768)))& (0+255)
  1200  02F4  00A1               	movwf	low ((?_sprintf| 0+1))
  1201  02F5  3080               	movlw	128
  1202  02F6  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1203  02F7  3052               	movlw	(low (main@blanco| 0))& (0+255)
  1204  02F8  120A  118A  246E  120A  118A  	fcall	_sprintf
  1205                           
  1206                           ;Game.c: 135: Lcd_Out2(1,AuxPosAnteriorGat,blanco);
  1207  02FD  084D               	movf	main@AuxPosAnteriorGat,w
  1208  02FE  00B5               	movwf	??_main
  1209  02FF  0835               	movf	??_main,w
  1210  0300  00F3               	movwf	Lcd_Out2@x
  1211  0301  3052               	movlw	(low (main@blanco| 0))& (0+255)
  1212  0302  00B6               	movwf	??_main+1
  1213  0303  0836               	movf	??_main+1,w
  1214  0304  00F4               	movwf	Lcd_Out2@buffer
  1215  0305  3001               	movlw	1
  1216  0306  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1217                           
  1218                           ;Game.c: 137: posGat=posGat-1;
  1219  030B  1283               	bcf	3,5	;RP0=0, select bank0
  1220  030C  1303               	bcf	3,6	;RP1=0, select bank0
  1221  030D  085A               	movf	main@posGat,w
  1222  030E  3EFF               	addlw	255
  1223  030F  00DA               	movwf	main@posGat
  1224  0310  085B               	movf	main@posGat+1,w
  1225  0311  1803               	skipnc
  1226  0312  3E01               	addlw	1
  1227  0313  3EFF               	addlw	255
  1228  0314  00DB               	movwf	main@posGat+1
  1229                           
  1230                           ;Game.c: 139: if(posGat<4){
  1231  0315  085B               	movf	main@posGat+1,w
  1232  0316  3A80               	xorlw	128
  1233  0317  00FF               	movwf	127
  1234  0318  3080               	movlw	128
  1235  0319  027F               	subwf	127,w
  1236  031A  1D03               	skipz
  1237  031B  2B1E               	goto	u2085
  1238  031C  3004               	movlw	4
  1239  031D  025A               	subwf	main@posGat,w
  1240  031E                     u2085:	
  1241  031E  1803               	skipnc
  1242  031F  2B26               	goto	l2022
  1243                           
  1244                           ;Game.c: 140: posGat=13;
  1245  0320  300D               	movlw	13
  1246  0321  1283               	bcf	3,5	;RP0=0, select bank0
  1247  0322  1303               	bcf	3,6	;RP1=0, select bank0
  1248  0323  00DA               	movwf	main@posGat
  1249  0324  3000               	movlw	0
  1250  0325  00DB               	movwf	main@posGat+1
  1251  0326                     l2022:	
  1252                           
  1253                           ;Game.c: 141: };Game.c: 143: sprintf(imagenGato,"G","");
  1254  0326  3056               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1255  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1257  0329  00B5               	movwf	??_main
  1258  032A  0835               	movf	??_main,w
  1259  032B  00A0               	movwf	sprintf@f
  1260  032C  302C               	movlw	(low (((STR_13+8)-__stringbase)| (0+32768)))& (0+255)
  1261  032D  00A1               	movwf	low ((?_sprintf| 0+1))
  1262  032E  3080               	movlw	128
  1263  032F  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1264  0330  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
  1265  0331  120A  118A  246E  120A  118A  	fcall	_sprintf
  1266                           
  1267                           ;Game.c: 144: Lcd_Out2(1,posGat,imagenGato);
  1268  0336  085A               	movf	main@posGat,w
  1269  0337  00B5               	movwf	??_main
  1270  0338  0835               	movf	??_main,w
  1271  0339  00F3               	movwf	Lcd_Out2@x
  1272  033A  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
  1273  033B  00B6               	movwf	??_main+1
  1274  033C  0836               	movf	??_main+1,w
  1275  033D  00F4               	movwf	Lcd_Out2@buffer
  1276  033E  3001               	movlw	1
  1277  033F  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1278                           
  1279                           ;Game.c: 145: sprintf(imagenRaton,"R","");
  1280  0344  3058               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1281  0345  1283               	bcf	3,5	;RP0=0, select bank0
  1282  0346  1303               	bcf	3,6	;RP1=0, select bank0
  1283  0347  00B5               	movwf	??_main
  1284  0348  0835               	movf	??_main,w
  1285  0349  00A0               	movwf	sprintf@f
  1286  034A  302C               	movlw	(low (((STR_13+8)-__stringbase)| (0+32768)))& (0+255)
  1287  034B  00A1               	movwf	low ((?_sprintf| 0+1))
  1288  034C  3080               	movlw	128
  1289  034D  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1290  034E  304F               	movlw	(low (main@imagenRaton| 0))& (0+255)
  1291  034F  120A  118A  246E  120A  118A  	fcall	_sprintf
  1292                           
  1293                           ;Game.c: 146: Lcd_Out2(1,posRat,imagenRaton);
  1294  0354  0858               	movf	main@posRat,w
  1295  0355  00B5               	movwf	??_main
  1296  0356  0835               	movf	??_main,w
  1297  0357  00F3               	movwf	Lcd_Out2@x
  1298  0358  304F               	movlw	(low (main@imagenRaton| 0))& (0+255)
  1299  0359  00B6               	movwf	??_main+1
  1300  035A  0836               	movf	??_main+1,w
  1301  035B  00F4               	movwf	Lcd_Out2@buffer
  1302  035C  3001               	movlw	1
  1303  035D  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1304  0362                     l2030:	
  1305                           
  1306                           ;Game.c: 148: };Game.c: 150: if(RE1==1){
  1307  0362  1283               	bcf	3,5	;RP0=0, select bank0
  1308  0363  1303               	bcf	3,6	;RP1=0, select bank0
  1309  0364  1C89               	btfss	9,1	;volatile
  1310  0365  2BFD               	goto	l92
  1311  0366                     l93:	
  1312  0366  1889               	btfsc	9,1	;volatile
  1313  0367  2B66               	goto	l93
  1314                           
  1315                           ;Game.c: 152: AuxPosAnteriorGat=posGat;
  1316  0368  085B               	movf	main@posGat+1,w
  1317  0369  00CE               	movwf	main@AuxPosAnteriorGat+1
  1318  036A  085A               	movf	main@posGat,w
  1319  036B  00CD               	movwf	main@AuxPosAnteriorGat
  1320                           
  1321                           ;Game.c: 153: sprintf(blanco," "," ");
  1322  036C  302B               	movlw	(low (((STR_13+7)-__stringbase)| (0+32768)))& (0+255)
  1323  036D  00B5               	movwf	??_main
  1324  036E  0835               	movf	??_main,w
  1325  036F  00A0               	movwf	sprintf@f
  1326  0370  302B               	movlw	(low (((STR_13+7)-__stringbase)| (0+32768)))& (0+255)
  1327  0371  00A1               	movwf	low ((?_sprintf| 0+1))
  1328  0372  3080               	movlw	128
  1329  0373  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1330  0374  3052               	movlw	(low (main@blanco| 0))& (0+255)
  1331  0375  120A  118A  246E  120A  118A  	fcall	_sprintf
  1332                           
  1333                           ;Game.c: 154: Lcd_Out2(1,AuxPosAnteriorGat,blanco);
  1334  037A  084D               	movf	main@AuxPosAnteriorGat,w
  1335  037B  00B5               	movwf	??_main
  1336  037C  0835               	movf	??_main,w
  1337  037D  00F3               	movwf	Lcd_Out2@x
  1338  037E  3052               	movlw	(low (main@blanco| 0))& (0+255)
  1339  037F  00B6               	movwf	??_main+1
  1340  0380  0836               	movf	??_main+1,w
  1341  0381  00F4               	movwf	Lcd_Out2@buffer
  1342  0382  3001               	movlw	1
  1343  0383  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1344                           
  1345                           ;Game.c: 156: sprintf(blanco," "," ");
  1346  0388  302B               	movlw	(low (((STR_13+7)-__stringbase)| (0+32768)))& (0+255)
  1347  0389  1283               	bcf	3,5	;RP0=0, select bank0
  1348  038A  1303               	bcf	3,6	;RP1=0, select bank0
  1349  038B  00B5               	movwf	??_main
  1350  038C  0835               	movf	??_main,w
  1351  038D  00A0               	movwf	sprintf@f
  1352  038E  302B               	movlw	(low (((STR_13+7)-__stringbase)| (0+32768)))& (0+255)
  1353  038F  00A1               	movwf	low ((?_sprintf| 0+1))
  1354  0390  3080               	movlw	128
  1355  0391  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1356  0392  3052               	movlw	(low (main@blanco| 0))& (0+255)
  1357  0393  120A  118A  246E  120A  118A  	fcall	_sprintf
  1358                           
  1359                           ;Game.c: 157: Lcd_Out2(1,AuxPosAnteriorGat,blanco);
  1360  0398  084D               	movf	main@AuxPosAnteriorGat,w
  1361  0399  00B5               	movwf	??_main
  1362  039A  0835               	movf	??_main,w
  1363  039B  00F3               	movwf	Lcd_Out2@x
  1364  039C  3052               	movlw	(low (main@blanco| 0))& (0+255)
  1365  039D  00B6               	movwf	??_main+1
  1366  039E  0836               	movf	??_main+1,w
  1367  039F  00F4               	movwf	Lcd_Out2@buffer
  1368  03A0  3001               	movlw	1
  1369  03A1  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1370                           
  1371                           ;Game.c: 159: posGat=posGat+1;
  1372  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  1373  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  1374  03A8  085A               	movf	main@posGat,w
  1375  03A9  3E01               	addlw	1
  1376  03AA  00DA               	movwf	main@posGat
  1377  03AB  085B               	movf	main@posGat+1,w
  1378  03AC  1803               	skipnc
  1379  03AD  3E01               	addlw	1
  1380  03AE  3E00               	addlw	0
  1381  03AF  00DB               	movwf	main@posGat+1
  1382                           
  1383                           ;Game.c: 161: if(posGat>13){
  1384  03B0  085B               	movf	main@posGat+1,w
  1385  03B1  3A80               	xorlw	128
  1386  03B2  00FF               	movwf	127
  1387  03B3  3080               	movlw	128
  1388  03B4  027F               	subwf	127,w
  1389  03B5  1D03               	skipz
  1390  03B6  2BB9               	goto	u2115
  1391  03B7  300E               	movlw	14
  1392  03B8  025A               	subwf	main@posGat,w
  1393  03B9                     u2115:	
  1394  03B9  1C03               	skipc
  1395  03BA  2BC1               	goto	l2050
  1396                           
  1397                           ;Game.c: 162: posGat=4;
  1398  03BB  3004               	movlw	4
  1399  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  1400  03BD  1303               	bcf	3,6	;RP1=0, select bank0
  1401  03BE  00DA               	movwf	main@posGat
  1402  03BF  3000               	movlw	0
  1403  03C0  00DB               	movwf	main@posGat+1
  1404  03C1                     l2050:	
  1405                           
  1406                           ;Game.c: 163: };Game.c: 164: sprintf(imagenGato,"G","");
  1407  03C1  3056               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1408  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  1409  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  1410  03C4  00B5               	movwf	??_main
  1411  03C5  0835               	movf	??_main,w
  1412  03C6  00A0               	movwf	sprintf@f
  1413  03C7  302C               	movlw	(low (((STR_13+8)-__stringbase)| (0+32768)))& (0+255)
  1414  03C8  00A1               	movwf	low ((?_sprintf| 0+1))
  1415  03C9  3080               	movlw	128
  1416  03CA  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1417  03CB  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
  1418  03CC  120A  118A  246E  120A  118A  	fcall	_sprintf
  1419                           
  1420                           ;Game.c: 165: Lcd_Out2(1,posGat,imagenGato);
  1421  03D1  085A               	movf	main@posGat,w
  1422  03D2  00B5               	movwf	??_main
  1423  03D3  0835               	movf	??_main,w
  1424  03D4  00F3               	movwf	Lcd_Out2@x
  1425  03D5  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
  1426  03D6  00B6               	movwf	??_main+1
  1427  03D7  0836               	movf	??_main+1,w
  1428  03D8  00F4               	movwf	Lcd_Out2@buffer
  1429  03D9  3001               	movlw	1
  1430  03DA  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1431                           
  1432                           ;Game.c: 166: sprintf(imagenRaton,"R","");
  1433  03DF  3058               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1434  03E0  1283               	bcf	3,5	;RP0=0, select bank0
  1435  03E1  1303               	bcf	3,6	;RP1=0, select bank0
  1436  03E2  00B5               	movwf	??_main
  1437  03E3  0835               	movf	??_main,w
  1438  03E4  00A0               	movwf	sprintf@f
  1439  03E5  302C               	movlw	(low (((STR_13+8)-__stringbase)| (0+32768)))& (0+255)
  1440  03E6  00A1               	movwf	low ((?_sprintf| 0+1))
  1441  03E7  3080               	movlw	128
  1442  03E8  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1443  03E9  304F               	movlw	(low (main@imagenRaton| 0))& (0+255)
  1444  03EA  120A  118A  246E  120A  118A  	fcall	_sprintf
  1445                           
  1446                           ;Game.c: 167: Lcd_Out2(1,posRat,imagenRaton);
  1447  03EF  0858               	movf	main@posRat,w
  1448  03F0  00B5               	movwf	??_main
  1449  03F1  0835               	movf	??_main,w
  1450  03F2  00F3               	movwf	Lcd_Out2@x
  1451  03F3  304F               	movlw	(low (main@imagenRaton| 0))& (0+255)
  1452  03F4  00B6               	movwf	??_main+1
  1453  03F5  0836               	movf	??_main+1,w
  1454  03F6  00F4               	movwf	Lcd_Out2@buffer
  1455  03F7  3001               	movlw	1
  1456  03F8  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1457  03FD                     l92:	
  1458                           
  1459                           ;Game.c: 170: };Game.c: 173: if(posRat==posGat){
  1460  03FD  1283               	bcf	3,5	;RP0=0, select bank0
  1461  03FE  1303               	bcf	3,6	;RP1=0, select bank0
  1462  03FF  085B               	movf	main@posGat+1,w
  1463  0400  0659               	xorwf	main@posRat+1,w
  1464  0401  1D03               	skipz
  1465  0402  2C05               	goto	u2125
  1466  0403  085A               	movf	main@posGat,w
  1467  0404  0658               	xorwf	main@posRat,w
  1468  0405                     u2125:	
  1469  0405  1D03               	skipz
  1470  0406  29EB               	goto	l80
  1471                           
  1472                           ;Game.c: 175: jumpRat=0;
  1473  0407  01C6               	clrf	main@jumpRat
  1474  0408  01C7               	clrf	main@jumpRat+1
  1475                           
  1476                           ;Game.c: 177: RA7=1;
  1477  0409  1785               	bsf	5,7	;volatile
  1478                           
  1479                           ;Game.c: 178: _delay((unsigned long)((2000)*(4000000/4000.0)));
  1480  040A  300B               	movlw	11
  1481  040B  1283               	bcf	3,5	;RP0=0, select bank0
  1482  040C  1303               	bcf	3,6	;RP1=0, select bank0
  1483  040D  00B7               	movwf	??_main+2
  1484  040E  3026               	movlw	38
  1485  040F  00B6               	movwf	??_main+1
  1486  0410  305D               	movlw	93
  1487  0411  00B5               	movwf	??_main
  1488  0412                     u2147:	
  1489  0412  0BB5               	decfsz	??_main,f
  1490  0413  2C12               	goto	u2147
  1491  0414  0BB6               	decfsz	??_main+1,f
  1492  0415  2C12               	goto	u2147
  1493  0416  0BB7               	decfsz	??_main+2,f
  1494  0417  2C12               	goto	u2147
  1495                           
  1496                           ;Game.c: 179: RA7=0;
  1497  0418  1283               	bcf	3,5	;RP0=0, select bank0
  1498  0419  1303               	bcf	3,6	;RP1=0, select bank0
  1499  041A  1385               	bcf	5,7	;volatile
  1500                           
  1501                           ;Game.c: 181: posGat=rand()%(10)+4;
  1502  041B  300A               	movlw	10
  1503  041C  00A7               	movwf	___awmod@divisor
  1504  041D  3000               	movlw	0
  1505  041E  00A8               	movwf	___awmod@divisor+1
  1506  041F  120A  158A  2626  120A  118A  	fcall	_rand
  1507  0424  0821               	movf	?_rand+1,w
  1508  0425  00AA               	movwf	___awmod@dividend+1
  1509  0426  0820               	movf	?_rand,w
  1510  0427  00A9               	movwf	___awmod@dividend
  1511  0428  120A  158A  2669  120A  118A  	fcall	___awmod
  1512  042D  0827               	movf	?___awmod,w
  1513  042E  3E04               	addlw	4
  1514  042F  00DA               	movwf	main@posGat
  1515  0430  0828               	movf	?___awmod+1,w
  1516  0431  1803               	skipnc
  1517  0432  3E01               	addlw	1
  1518  0433  3E00               	addlw	0
  1519  0434  00DB               	movwf	main@posGat+1
  1520                           
  1521                           ;Game.c: 183: sprintf(imagenGato,"G","");
  1522  0435  3056               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1523  0436  00B5               	movwf	??_main
  1524  0437  0835               	movf	??_main,w
  1525  0438  00A0               	movwf	sprintf@f
  1526  0439  302C               	movlw	(low (((STR_13+8)-__stringbase)| (0+32768)))& (0+255)
  1527  043A  00A1               	movwf	low ((?_sprintf| 0+1))
  1528  043B  3080               	movlw	128
  1529  043C  00A2               	movwf	(low ((?_sprintf| 0+1))+1)
  1530  043D  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
  1531  043E  120A  118A  246E  120A  118A  	fcall	_sprintf
  1532                           
  1533                           ;Game.c: 184: Lcd_Out2(1,posGat,imagenGato);
  1534  0443  085A               	movf	main@posGat,w
  1535  0444  00B5               	movwf	??_main
  1536  0445  0835               	movf	??_main,w
  1537  0446  00F3               	movwf	Lcd_Out2@x
  1538  0447  3055               	movlw	(low (main@imagenGato| 0))& (0+255)
  1539  0448  00B6               	movwf	??_main+1
  1540  0449  0836               	movf	??_main+1,w
  1541  044A  00F4               	movwf	Lcd_Out2@buffer
  1542  044B  3001               	movlw	1
  1543  044C  120A  158A  2573  120A  118A  	fcall	_Lcd_Out2
  1544                           
  1545                           ;Game.c: 186: atrapado++;
  1546  0451  3001               	movlw	1
  1547  0452  1283               	bcf	3,5	;RP0=0, select bank0
  1548  0453  1303               	bcf	3,6	;RP1=0, select bank0
  1549  0454  07C4               	addwf	main@atrapado,f
  1550  0455  1803               	skipnc
  1551  0456  0AC5               	incf	main@atrapado+1,f
  1552  0457  3000               	movlw	0
  1553  0458  07C5               	addwf	main@atrapado+1,f
  1554                           
  1555                           ;Game.c: 188: sprintf(iconAtrapado,"Atr%02d ",atrapado);
  1556  0459  302D               	movlw	(low ((STR_30-__stringbase)| (0+32768)))& (0+255)
  1557  045A  00B5               	movwf	??_main
  1558  045B  0835               	movf	??_main,w
  1559  045C  00A0               	movwf	sprintf@f
  1560  045D  0845               	movf	main@atrapado+1,w
  1561  045E  00A2               	movwf	?_sprintf+2
  1562  045F  0844               	movf	main@atrapado,w
  1563  0460  00A1               	movwf	?_sprintf+1
  1564  0461  3048               	movlw	(low (main@iconAtrapado| 0))& (0+255)
  1565  0462  120A  118A  246E  120A  118A  	fcall	_sprintf
  1566                           
  1567                           ;Game.c: 189: Lcd_Out2(2,0,iconAtrapado);
  1568  0467  01F3               	clrf	Lcd_Out2@x
  1569  0468  3048               	movlw	(low (main@iconAtrapado| 0))& (0+255)
  1570  0469  00B5               	movwf	??_main
  1571  046A  0835               	movf	??_main,w
  1572  046B  00F4               	movwf	Lcd_Out2@buffer
  1573  046C  3002               	movlw	2
  1574  046D  29E6               	goto	L1
  1575  046E                     __end_of_main:	
  1576                           
  1577                           	psect	text1
  1578  046E                     __ptext1:	
  1579 ;; *************** function _sprintf *****************
  1580 ;; Defined at:
  1581 ;;		line 500 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\doprnt.c"
  1582 ;; Parameters:    Size  Location     Type
  1583 ;;  sp              1    wreg     PTR unsigned char 
  1584 ;;		 -> main@imagenRaton(3), main@blanco(3), main@imagenGato(3), main@iconAtrapado(3), 
  1585 ;;		 -> main@iconVidas(8), 
  1586 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1587 ;;		 -> STR_30(9), STR_28(2), STR_26(2), STR_24(2), 
  1588 ;;		 -> STR_22(2), STR_20(2), STR_18(2), STR_16(2), 
  1589 ;;		 -> STR_14(2), STR_13(9), STR_11(4), STR_9(2), 
  1590 ;;		 -> STR_7(2), STR_5(2), STR_3(2), STR_2(7), 
  1591 ;;		 -> STR_1(8), 
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  sp              1   20[BANK0 ] PTR unsigned char 
  1594 ;;		 -> main@imagenRaton(3), main@blanco(3), main@imagenGato(3), main@iconAtrapado(3), 
  1595 ;;		 -> main@iconVidas(8), 
  1596 ;;  idx             1    6[BANK0 ] unsigned char 
  1597 ;;  tmpval          4    0        struct .
  1598 ;;  width           2   17[BANK0 ] int 
  1599 ;;  flag            2   15[BANK0 ] unsigned short 
  1600 ;;  val             2   12[BANK0 ] unsigned int 
  1601 ;;  len             2   10[BANK0 ] unsigned int 
  1602 ;;  cp              2    7[BANK0 ] PTR const unsigned char 
  1603 ;;		 -> STR_31(7), ?_sprintf(2), STR_29(1), STR_27(1), 
  1604 ;;		 -> STR_25(1), STR_23(2), STR_21(2), STR_19(1), 
  1605 ;;		 -> STR_17(1), STR_15(2), STR_12(6), STR_10(1), 
  1606 ;;		 -> STR_8(1), STR_6(2), STR_4(1), 
  1607 ;;  c               1   19[BANK0 ] unsigned char 
  1608 ;;  prec            1   14[BANK0 ] char 
  1609 ;;  ap              1    9[BANK0 ] PTR void [1]
  1610 ;;		 -> ?_sprintf(2), 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  2    0[BANK0 ] int 
  1613 ;; Registers used:
  1614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1615 ;; Tracked objects:
  1616 ;;		On entry : 300/0
  1617 ;;		On exit  : B00/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1620 ;;      Params:         0       3       0       0       0
  1621 ;;      Locals:         0      15       0       0       0
  1622 ;;      Temps:          0       3       0       0       0
  1623 ;;      Totals:         0      21       0       0       0
  1624 ;;Total ram usage:       21 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    1
  1627 ;; This function calls:
  1628 ;;		___bmul
  1629 ;;		___lwdiv
  1630 ;;		___lwmod
  1631 ;;		___wmul
  1632 ;;		_isdigit
  1633 ;; This function is called by:
  1634 ;;		_main
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           
  1639                           ;psect for function _sprintf
  1640  046E                     _sprintf:	
  1641                           
  1642                           ;incstack = 0
  1643                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1644                           ;sprintf@sp stored from wreg
  1645  046E  00B4               	movwf	sprintf@sp
  1646                           
  1647                           ;doprnt.c: 502: va_list ap;;doprnt.c: 507: char c;;doprnt.c: 509: int width;;doprnt.c: 5
      +                          16: signed char prec;;doprnt.c: 520: unsigned short flag;;doprnt.c: 535: union {;doprnt.
      +                          c: 536: unsigned long vd;;doprnt.c: 537: double integ;;doprnt.c: 538: } tmpval;;doprnt.c
      +                          : 540: unsigned int val;;doprnt.c: 541: unsigned len;;doprnt.c: 542: const char * cp;;do
      +                          prnt.c: 545: *ap = __va_start();
  1648  046F  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1649  0470  00A3               	movwf	??_sprintf
  1650  0471  0823               	movf	??_sprintf,w
  1651  0472  00A9               	movwf	sprintf@ap
  1652  0473                     l1868:	
  1653                           ;doprnt.c: 548: while((c = *f++)) {
  1654                           
  1655  0473  3001               	movlw	1
  1656  0474  1283               	bcf	3,5	;RP0=0, select bank0
  1657  0475  1303               	bcf	3,6	;RP1=0, select bank0
  1658  0476  07A0               	addwf	sprintf@f,f
  1659  0477  30FF               	movlw	-1
  1660  0478  0720               	addwf	sprintf@f,w
  1661  0479  0084               	movwf	4
  1662  047A  120A  118A  200D  120A  118A  	fcall	stringdir
  1663  047F  00A3               	movwf	??_sprintf
  1664  0480  0823               	movf	??_sprintf,w
  1665  0481  00B3               	movwf	sprintf@c
  1666  0482  0833               	movf	sprintf@c,w
  1667  0483  1903               	btfsc	3,2
  1668  0484  2FE1               	goto	l1870
  1669                           
  1670                           ;doprnt.c: 550: if(c != '%')
  1671  0485  3025               	movlw	37
  1672  0486  0633               	xorwf	sprintf@c,w
  1673  0487  1903               	btfsc	3,2
  1674  0488  2C95               	goto	l1644
  1675                           
  1676                           ;doprnt.c: 552: {;doprnt.c: 553: ((*sp++ = (c)));
  1677  0489  0833               	movf	sprintf@c,w
  1678  048A  00A3               	movwf	??_sprintf
  1679  048B  0834               	movf	sprintf@sp,w
  1680  048C  0084               	movwf	4
  1681  048D  0823               	movf	??_sprintf,w
  1682  048E  1383               	bcf	3,7	;select IRP bank0
  1683  048F  0080               	movwf	0
  1684  0490  3001               	movlw	1
  1685  0491  00A3               	movwf	??_sprintf
  1686  0492  0823               	movf	??_sprintf,w
  1687  0493  07B4               	addwf	sprintf@sp,f
  1688                           
  1689                           ;doprnt.c: 554: continue;
  1690  0494  2C73               	goto	l1868
  1691  0495                     l1644:	
  1692                           
  1693                           ;doprnt.c: 555: };doprnt.c: 558: width = 0;
  1694  0495  01B1               	clrf	sprintf@width
  1695  0496  01B2               	clrf	sprintf@width+1
  1696                           
  1697                           ;doprnt.c: 560: flag = 0;
  1698  0497  01AF               	clrf	sprintf@flag
  1699  0498  01B0               	clrf	sprintf@flag+1
  1700  0499  2CA1               	goto	l1652
  1701  049A                     l200:	
  1702                           ;doprnt.c: 565: case '-':
  1703                           
  1704                           
  1705                           ;doprnt.c: 566: flag |= 0x08;
  1706  049A  15AF               	bsf	sprintf@flag,3
  1707                           
  1708                           ;doprnt.c: 568: continue;
  1709  049B  2C9D               	goto	l1646
  1710  049C                     l202:	
  1711                           ;doprnt.c: 591: case '0':
  1712                           
  1713                           
  1714                           ;doprnt.c: 592: flag |= 0x04;
  1715  049C  152F               	bsf	sprintf@flag,2
  1716  049D                     l1646:	
  1717                           
  1718                           ;doprnt.c: 567: f++;
  1719  049D  3001               	movlw	1
  1720  049E  00A3               	movwf	??_sprintf
  1721  049F  0823               	movf	??_sprintf,w
  1722  04A0  07A0               	addwf	sprintf@f,f
  1723  04A1                     l1652:	
  1724  04A1  0820               	movf	sprintf@f,w
  1725  04A2  0084               	movwf	4
  1726  04A3  120A  118A  200D  120A  118A  	fcall	stringdir
  1727                           
  1728                           ; Switch size 1, requested type "simple"
  1729                           ; Number of cases is 2, Range of values is 45 to 48
  1730                           ; switch strategies available:
  1731                           ; Name         Instructions Cycles
  1732                           ; simple_byte            7     4 (average)
  1733                           ; direct_byte           23    11 (fixed)
  1734                           ; jumptable            263     9 (fixed)
  1735                           ;	Chosen strategy is simple_byte
  1736  04A8  3A2D               	xorlw	45	; case 45
  1737  04A9  1903               	skipnz
  1738  04AA  2C9A               	goto	l200
  1739  04AB  3A1D               	xorlw	29	; case 48
  1740  04AC  1903               	skipnz
  1741  04AD  2C9C               	goto	l202
  1742  04AE  2CAF               	goto	l204
  1743  04AF                     l204:	
  1744                           
  1745                           ;doprnt.c: 605: if(flag & 0x08)
  1746  04AF  1DAF               	btfss	sprintf@flag,3
  1747  04B0  2CB5               	goto	l1656
  1748                           
  1749                           ;doprnt.c: 606: flag &= ~0x04;
  1750  04B1  30FB               	movlw	251
  1751  04B2  05AF               	andwf	sprintf@flag,f
  1752  04B3  30FF               	movlw	255
  1753  04B4  05B0               	andwf	sprintf@flag+1,f
  1754  04B5                     l1656:	
  1755                           
  1756                           ;doprnt.c: 609: if(isdigit((unsigned)*f)) {
  1757  04B5  0820               	movf	sprintf@f,w
  1758  04B6  0084               	movwf	4
  1759  04B7  120A  118A  200D  120A  118A  	fcall	stringdir
  1760  04BC  120A  158A  2522  120A  118A  	fcall	_isdigit
  1761  04C1  1C03               	btfss	3,0
  1762  04C2  2CFB               	goto	l1668
  1763                           
  1764                           ;doprnt.c: 610: width = 0;
  1765  04C3  01B1               	clrf	sprintf@width
  1766  04C4  01B2               	clrf	sprintf@width+1
  1767  04C5                     l1660:	
  1768                           
  1769                           ;doprnt.c: 612: width *= 10;
  1770  04C5  300A               	movlw	10
  1771  04C6  00F0               	movwf	___wmul@multiplier
  1772  04C7  3000               	movlw	0
  1773  04C8  00F1               	movwf	___wmul@multiplier+1
  1774  04C9  0832               	movf	sprintf@width+1,w
  1775  04CA  00F3               	movwf	___wmul@multiplicand+1
  1776  04CB  0831               	movf	sprintf@width,w
  1777  04CC  00F2               	movwf	___wmul@multiplicand
  1778  04CD  120A  118A  2070  120A  118A  	fcall	___wmul
  1779  04D2  0871               	movf	?___wmul+1,w
  1780  04D3  00B2               	movwf	sprintf@width+1
  1781  04D4  0870               	movf	?___wmul,w
  1782  04D5  00B1               	movwf	sprintf@width
  1783                           
  1784                           ;doprnt.c: 613: width += *f++ - '0';
  1785  04D6  0820               	movf	sprintf@f,w
  1786  04D7  0084               	movwf	4
  1787  04D8  120A  118A  200D  120A  118A  	fcall	stringdir
  1788  04DD  3ED0               	addlw	208
  1789  04DE  00A3               	movwf	??_sprintf
  1790  04DF  30FF               	movlw	255
  1791  04E0  1803               	skipnc
  1792  04E1  3000               	movlw	0
  1793  04E2  00A4               	movwf	??_sprintf+1
  1794  04E3  0823               	movf	??_sprintf,w
  1795  04E4  07B1               	addwf	sprintf@width,f
  1796  04E5  1803               	skipnc
  1797  04E6  0AB2               	incf	sprintf@width+1,f
  1798  04E7  0824               	movf	??_sprintf+1,w
  1799  04E8  07B2               	addwf	sprintf@width+1,f
  1800  04E9  3001               	movlw	1
  1801  04EA  00A3               	movwf	??_sprintf
  1802  04EB  0823               	movf	??_sprintf,w
  1803  04EC  07A0               	addwf	sprintf@f,f
  1804                           
  1805                           ;doprnt.c: 614: } while(isdigit((unsigned)*f));
  1806  04ED  0820               	movf	sprintf@f,w
  1807  04EE  0084               	movwf	4
  1808  04EF  120A  118A  200D  120A  118A  	fcall	stringdir
  1809  04F4  120A  158A  2522  120A  118A  	fcall	_isdigit
  1810  04F9  1803               	btfsc	3,0
  1811  04FA  2CC5               	goto	l1660
  1812  04FB                     l1668:	
  1813                           
  1814                           ;doprnt.c: 620: };doprnt.c: 623: if(*f == '.') {
  1815  04FB  0820               	movf	sprintf@f,w
  1816  04FC  0084               	movwf	4
  1817  04FD  120A  118A  200D  120A  118A  	fcall	stringdir
  1818  0502  3A2E               	xorlw	46
  1819  0503  1D03               	skipz
  1820  0504  2D35               	goto	l1682
  1821                           
  1822                           ;doprnt.c: 624: flag |= 0x4000;
  1823  0505  1730               	bsf	sprintf@flag+1,6
  1824                           
  1825                           ;doprnt.c: 625: f++;
  1826  0506  3001               	movlw	1
  1827  0507  00A3               	movwf	??_sprintf
  1828  0508  0823               	movf	??_sprintf,w
  1829  0509  07A0               	addwf	sprintf@f,f
  1830                           
  1831                           ;doprnt.c: 639: {;doprnt.c: 640: prec = 0;
  1832  050A  01AE               	clrf	sprintf@prec
  1833  050B                     l1680:	
  1834                           ;doprnt.c: 641: while(isdigit((unsigned)*f))
  1835                           
  1836  050B  0820               	movf	sprintf@f,w
  1837  050C  0084               	movwf	4
  1838  050D  120A  118A  200D  120A  118A  	fcall	stringdir
  1839  0512  120A  158A  2522  120A  118A  	fcall	_isdigit
  1840  0517  1C03               	btfss	3,0
  1841  0518  2DE7               	goto	l1738
  1842                           
  1843                           ;doprnt.c: 642: prec = prec*10 + *f++ - '0';
  1844  0519  0820               	movf	sprintf@f,w
  1845  051A  0084               	movwf	4
  1846  051B  120A  118A  200D  120A  118A  	fcall	stringdir
  1847  0520  00A3               	movwf	??_sprintf
  1848  0521  300A               	movlw	10
  1849  0522  00A4               	movwf	??_sprintf+1
  1850  0523  0824               	movf	??_sprintf+1,w
  1851  0524  00F0               	movwf	___bmul@multiplicand
  1852  0525  082E               	movf	sprintf@prec,w
  1853  0526  120A  158A  2530  120A  118A  	fcall	___bmul
  1854  052B  0723               	addwf	??_sprintf,w
  1855  052C  3ED0               	addlw	-48
  1856  052D  00A5               	movwf	??_sprintf+2
  1857  052E  0825               	movf	??_sprintf+2,w
  1858  052F  00AE               	movwf	sprintf@prec
  1859  0530  3001               	movlw	1
  1860  0531  00A3               	movwf	??_sprintf
  1861  0532  0823               	movf	??_sprintf,w
  1862  0533  07A0               	addwf	sprintf@f,f
  1863  0534  2D0B               	goto	l1680
  1864  0535                     l1682:	
  1865                           
  1866                           ;doprnt.c: 645: prec = 0;
  1867  0535  01AE               	clrf	sprintf@prec
  1868  0536  2DE7               	goto	l1738
  1869  0537                     l221:	
  1870                           
  1871                           ;doprnt.c: 737: case 'x':;doprnt.c: 740: flag |= 0x80;
  1872  0537  17AF               	bsf	sprintf@flag,7
  1873                           
  1874                           ;doprnt.c: 742: break;
  1875  0538  2E05               	goto	l219
  1876  0539                     l1684:	
  1877                           
  1878                           ;doprnt.c: 753: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1879  0539  0829               	movf	sprintf@ap,w
  1880  053A  0084               	movwf	4
  1881  053B  1383               	bcf	3,7	;select IRP bank0
  1882  053C  0800               	movf	0,w
  1883  053D  00A7               	movwf	sprintf@cp
  1884  053E  0A84               	incf	4,f
  1885  053F  0800               	movf	0,w
  1886  0540  0384               	decf	4,f
  1887  0541  00A8               	movwf	sprintf@cp+1
  1888  0542  3002               	movlw	2
  1889  0543  00A3               	movwf	??_sprintf
  1890  0544  0823               	movf	??_sprintf,w
  1891  0545  07A9               	addwf	sprintf@ap,f
  1892                           
  1893                           ;doprnt.c: 759: if(!cp)
  1894  0546  0827               	movf	sprintf@cp,w
  1895  0547  0428               	iorwf	sprintf@cp+1,w
  1896  0548  1D03               	btfss	3,2
  1897  0549  2D4E               	goto	l1692
  1898                           
  1899                           ;doprnt.c: 760: cp = "(null)";
  1900  054A  303E               	movlw	(low ((STR_31-__stringbase)| (0+32768)))& (0+255)
  1901  054B  00A7               	movwf	sprintf@cp
  1902  054C  3080               	movlw	128
  1903  054D  00A8               	movwf	sprintf@cp+1
  1904  054E                     l1692:	
  1905                           
  1906                           ;doprnt.c: 764: len = 0;
  1907  054E  01AA               	clrf	sprintf@len
  1908  054F  01AB               	clrf	sprintf@len+1
  1909  0550                     l1696:	
  1910                           ;doprnt.c: 765: while(cp[len])
  1911                           
  1912  0550  082A               	movf	sprintf@len,w
  1913  0551  0727               	addwf	sprintf@cp,w
  1914  0552  0084               	movwf	4
  1915  0553  0828               	movf	sprintf@cp+1,w
  1916  0554  1803               	skipnc
  1917  0555  0A28               	incf	sprintf@cp+1,w
  1918  0556  00FF               	movwf	127
  1919  0557  120A  118A  2003  120A  118A  	fcall	stringtab
  1920  055C  3A00               	xorlw	0
  1921  055D  1903               	btfsc	3,2
  1922  055E  2D66               	goto	l1698
  1923                           
  1924                           ;doprnt.c: 766: len++;
  1925  055F  3001               	movlw	1
  1926  0560  07AA               	addwf	sprintf@len,f
  1927  0561  1803               	skipnc
  1928  0562  0AAB               	incf	sprintf@len+1,f
  1929  0563  3000               	movlw	0
  1930  0564  07AB               	addwf	sprintf@len+1,f
  1931  0565  2D50               	goto	l1696
  1932  0566                     l1698:	
  1933                           
  1934                           ;doprnt.c: 772: if(prec && prec < len)
  1935  0566  082E               	movf	sprintf@prec,w
  1936  0567  1903               	btfsc	3,2
  1937  0568  2D7B               	goto	l1704
  1938  0569  082E               	movf	sprintf@prec,w
  1939  056A  00A3               	movwf	??_sprintf
  1940  056B  01A4               	clrf	??_sprintf+1
  1941  056C  1BA3               	btfsc	??_sprintf,7
  1942  056D  03A4               	decf	??_sprintf+1,f
  1943  056E  082B               	movf	sprintf@len+1,w
  1944  056F  0224               	subwf	??_sprintf+1,w
  1945  0570  1D03               	skipz
  1946  0571  2D74               	goto	u1575
  1947  0572  082A               	movf	sprintf@len,w
  1948  0573  0223               	subwf	??_sprintf,w
  1949  0574                     u1575:	
  1950  0574  1803               	skipnc
  1951  0575  2D7B               	goto	l1704
  1952                           
  1953                           ;doprnt.c: 773: len = prec;
  1954  0576  082E               	movf	sprintf@prec,w
  1955  0577  00AA               	movwf	sprintf@len
  1956  0578  01AB               	clrf	sprintf@len+1
  1957  0579  1BAA               	btfsc	sprintf@len,7
  1958  057A  03AB               	decf	sprintf@len+1,f
  1959  057B                     l1704:	
  1960                           
  1961                           ;doprnt.c: 776: if(width > len)
  1962  057B  0832               	movf	sprintf@width+1,w
  1963  057C  022B               	subwf	sprintf@len+1,w
  1964  057D  1D03               	skipz
  1965  057E  2D81               	goto	u1585
  1966  057F  0831               	movf	sprintf@width,w
  1967  0580  022A               	subwf	sprintf@len,w
  1968  0581                     u1585:	
  1969  0581  1803               	skipnc
  1970  0582  2D8A               	goto	l1708
  1971                           
  1972                           ;doprnt.c: 777: width -= len;
  1973  0583  082A               	movf	sprintf@len,w
  1974  0584  02B1               	subwf	sprintf@width,f
  1975  0585  082B               	movf	sprintf@len+1,w
  1976  0586  1C03               	skipc
  1977  0587  03B2               	decf	sprintf@width+1,f
  1978  0588  02B2               	subwf	sprintf@width+1,f
  1979  0589  2D8C               	goto	l1710
  1980  058A                     l1708:	
  1981                           
  1982                           ;doprnt.c: 778: else;doprnt.c: 779: width = 0;
  1983  058A  01B1               	clrf	sprintf@width
  1984  058B  01B2               	clrf	sprintf@width+1
  1985  058C                     l1710:	
  1986                           
  1987                           ;doprnt.c: 781: if(!(flag & 0x08))
  1988  058C  1DAF               	btfss	sprintf@flag,3
  1989  058D  2D9A               	goto	l1718
  1990  058E  2DC0               	goto	l1726
  1991  058F                     l1714:	
  1992                           
  1993                           ;doprnt.c: 784: ((*sp++ = (' ')));
  1994  058F  3020               	movlw	32
  1995  0590  00A3               	movwf	??_sprintf
  1996  0591  0834               	movf	sprintf@sp,w
  1997  0592  0084               	movwf	4
  1998  0593  0823               	movf	??_sprintf,w
  1999  0594  1383               	bcf	3,7	;select IRP bank0
  2000  0595  0080               	movwf	0
  2001  0596  3001               	movlw	1
  2002  0597  00A3               	movwf	??_sprintf
  2003  0598  0823               	movf	??_sprintf,w
  2004  0599  07B4               	addwf	sprintf@sp,f
  2005  059A                     l1718:	
  2006  059A  30FF               	movlw	255
  2007  059B  07B1               	addwf	sprintf@width,f
  2008  059C  1803               	skipnc
  2009  059D  0AB2               	incf	sprintf@width+1,f
  2010  059E  30FF               	movlw	255
  2011  059F  07B2               	addwf	sprintf@width+1,f
  2012  05A0  0A31               	incf	sprintf@width,w
  2013  05A1  1D03               	skipz
  2014  05A2  2D8F               	goto	l1714
  2015  05A3  0A32               	incf	sprintf@width+1,w
  2016  05A4  1903               	btfsc	3,2
  2017  05A5  2DC0               	goto	l1726
  2018  05A6  2D8F               	goto	l1714
  2019  05A7                     l1720:	
  2020                           
  2021                           ;doprnt.c: 787: ((*sp++ = (*cp++)));
  2022  05A7  0828               	movf	sprintf@cp+1,w
  2023  05A8  00FF               	movwf	127
  2024  05A9  0827               	movf	sprintf@cp,w
  2025  05AA  0084               	movwf	4
  2026  05AB  120A  118A  2003  120A  118A  	fcall	stringtab
  2027  05B0  00A3               	movwf	??_sprintf
  2028  05B1  0834               	movf	sprintf@sp,w
  2029  05B2  0084               	movwf	4
  2030  05B3  0823               	movf	??_sprintf,w
  2031  05B4  1383               	bcf	3,7	;select IRP bank0
  2032  05B5  0080               	movwf	0
  2033  05B6  3001               	movlw	1
  2034  05B7  07A7               	addwf	sprintf@cp,f
  2035  05B8  1803               	skipnc
  2036  05B9  0AA8               	incf	sprintf@cp+1,f
  2037  05BA  3000               	movlw	0
  2038  05BB  07A8               	addwf	sprintf@cp+1,f
  2039  05BC  3001               	movlw	1
  2040  05BD  00A3               	movwf	??_sprintf
  2041  05BE  0823               	movf	??_sprintf,w
  2042  05BF  07B4               	addwf	sprintf@sp,f
  2043  05C0                     l1726:	
  2044  05C0  3001               	movlw	1
  2045  05C1  02AA               	subwf	sprintf@len,f
  2046  05C2  3000               	movlw	0
  2047  05C3  1C03               	skipc
  2048  05C4  03AB               	decf	sprintf@len+1,f
  2049  05C5  02AB               	subwf	sprintf@len+1,f
  2050  05C6  0A2A               	incf	sprintf@len,w
  2051  05C7  1D03               	skipz
  2052  05C8  2DA7               	goto	l1720
  2053  05C9  0A2B               	incf	sprintf@len+1,w
  2054  05CA  1D03               	btfss	3,2
  2055  05CB  2DA7               	goto	l1720
  2056                           
  2057                           ;doprnt.c: 789: if(flag & 0x08)
  2058  05CC  19AF               	btfsc	sprintf@flag,3
  2059  05CD  2DDA               	goto	l1734
  2060  05CE  2C73               	goto	l1868
  2061  05CF                     l1730:	
  2062                           
  2063                           ;doprnt.c: 791: ((*sp++ = (' ')));
  2064  05CF  3020               	movlw	32
  2065  05D0  00A3               	movwf	??_sprintf
  2066  05D1  0834               	movf	sprintf@sp,w
  2067  05D2  0084               	movwf	4
  2068  05D3  0823               	movf	??_sprintf,w
  2069  05D4  1383               	bcf	3,7	;select IRP bank0
  2070  05D5  0080               	movwf	0
  2071  05D6  3001               	movlw	1
  2072  05D7  00A3               	movwf	??_sprintf
  2073  05D8  0823               	movf	??_sprintf,w
  2074  05D9  07B4               	addwf	sprintf@sp,f
  2075  05DA                     l1734:	
  2076  05DA  30FF               	movlw	255
  2077  05DB  07B1               	addwf	sprintf@width,f
  2078  05DC  1803               	skipnc
  2079  05DD  0AB2               	incf	sprintf@width+1,f
  2080  05DE  30FF               	movlw	255
  2081  05DF  07B2               	addwf	sprintf@width+1,f
  2082  05E0  0A31               	incf	sprintf@width,w
  2083  05E1  1D03               	skipz
  2084  05E2  2DCF               	goto	l1730
  2085  05E3  0A32               	incf	sprintf@width+1,w
  2086  05E4  1903               	btfsc	3,2
  2087  05E5  2C73               	goto	l1868
  2088  05E6  2DCF               	goto	l1730
  2089  05E7                     l1738:	
  2090  05E7  3001               	movlw	1
  2091  05E8  07A0               	addwf	sprintf@f,f
  2092  05E9  30FF               	movlw	-1
  2093  05EA  0720               	addwf	sprintf@f,w
  2094  05EB  0084               	movwf	4
  2095  05EC  120A  118A  200D  120A  118A  	fcall	stringdir
  2096  05F1  00B3               	movwf	sprintf@c
  2097                           
  2098                           ; Switch size 1, requested type "simple"
  2099                           ; Number of cases is 6, Range of values is 0 to 120
  2100                           ; switch strategies available:
  2101                           ; Name         Instructions Cycles
  2102                           ; simple_byte           19    10 (average)
  2103                           ; jumptable            260     6 (fixed)
  2104                           ;	Chosen strategy is simple_byte
  2105  05F2  3A00               	xorlw	0	; case 0
  2106  05F3  1903               	skipnz
  2107  05F4  2FE1               	goto	l1870
  2108  05F5  3A64               	xorlw	100	; case 100
  2109  05F6  1903               	skipnz
  2110  05F7  2E05               	goto	l219
  2111  05F8  3A0D               	xorlw	13	; case 105
  2112  05F9  1903               	skipnz
  2113  05FA  2E05               	goto	l219
  2114  05FB  3A19               	xorlw	25	; case 112
  2115  05FC  1903               	skipnz
  2116  05FD  2D37               	goto	l221
  2117  05FE  3A03               	xorlw	3	; case 115
  2118  05FF  1903               	skipnz
  2119  0600  2D39               	goto	l1684
  2120  0601  3A0B               	xorlw	11	; case 120
  2121  0602  1903               	skipnz
  2122  0603  2D37               	goto	l221
  2123  0604  2C73               	goto	l1868
  2124  0605                     l219:	
  2125                           
  2126                           ;doprnt.c: 1270: if((flag & 0x80) == 0x00)
  2127  0605  1BAF               	btfsc	sprintf@flag,7
  2128  0606  2E1F               	goto	l1750
  2129                           
  2130                           ;doprnt.c: 1272: {;doprnt.c: 1278: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2131  0607  0829               	movf	sprintf@ap,w
  2132  0608  0084               	movwf	4
  2133  0609  1383               	bcf	3,7	;select IRP bank0
  2134  060A  0800               	movf	0,w
  2135  060B  00AC               	movwf	sprintf@val
  2136  060C  0A84               	incf	4,f
  2137  060D  0800               	movf	0,w
  2138  060E  00AD               	movwf	sprintf@val+1
  2139  060F  3002               	movlw	2
  2140  0610  00A3               	movwf	??_sprintf
  2141  0611  0823               	movf	??_sprintf,w
  2142  0612  07A9               	addwf	sprintf@ap,f
  2143                           
  2144                           ;doprnt.c: 1280: if((int)val < 0) {
  2145  0613  1FAD               	btfss	sprintf@val+1,7
  2146  0614  2E2B               	goto	l1754
  2147                           
  2148                           ;doprnt.c: 1281: flag |= 0x03;
  2149  0615  3003               	movlw	3
  2150  0616  04AF               	iorwf	sprintf@flag,f
  2151  0617  3000               	movlw	0
  2152  0618  04B0               	iorwf	sprintf@flag+1,f
  2153                           
  2154                           ;doprnt.c: 1282: val = -val;
  2155  0619  09AC               	comf	sprintf@val,f
  2156  061A  09AD               	comf	sprintf@val+1,f
  2157  061B  0AAC               	incf	sprintf@val,f
  2158  061C  1903               	skipnz
  2159  061D  0AAD               	incf	sprintf@val+1,f
  2160  061E  2E2B               	goto	l1754
  2161  061F                     l1750:	
  2162                           
  2163                           ;doprnt.c: 1287: else;doprnt.c: 1292: {;doprnt.c: 1305: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  2164  061F  0829               	movf	sprintf@ap,w
  2165  0620  0084               	movwf	4
  2166  0621  1383               	bcf	3,7	;select IRP bank0
  2167  0622  0800               	movf	0,w
  2168  0623  00AC               	movwf	sprintf@val
  2169  0624  0A84               	incf	4,f
  2170  0625  0800               	movf	0,w
  2171  0626  00AD               	movwf	sprintf@val+1
  2172  0627  3002               	movlw	2
  2173  0628  00A3               	movwf	??_sprintf
  2174  0629  0823               	movf	??_sprintf,w
  2175  062A  07A9               	addwf	sprintf@ap,f
  2176  062B                     l1754:	
  2177                           
  2178                           ;doprnt.c: 1306: };doprnt.c: 1309: if(prec == 0 && val == 0)
  2179  062B  082E               	movf	sprintf@prec,w
  2180  062C  1D03               	btfss	3,2
  2181  062D  2E7F               	goto	l1782
  2182  062E  082C               	movf	sprintf@val,w
  2183  062F  042D               	iorwf	sprintf@val+1,w
  2184  0630  1D03               	btfss	3,2
  2185  0631  2E7F               	goto	l1782
  2186                           
  2187                           ;doprnt.c: 1310: prec++;
  2188  0632  3001               	movlw	1
  2189  0633  00A3               	movwf	??_sprintf
  2190  0634  0823               	movf	??_sprintf,w
  2191  0635  07AE               	addwf	sprintf@prec,f
  2192  0636  2E7F               	goto	l1782
  2193  0637                     l247:	
  2194                           ;doprnt.c: 1318: case 0x00:
  2195                           
  2196                           
  2197                           ;doprnt.c: 1324: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2198  0637  01B3               	clrf	sprintf@c
  2199  0638  0AB3               	incf	sprintf@c,f
  2200  0639                     l1764:	
  2201                           
  2202                           ;doprnt.c: 1325: if(val < dpowers[c])
  2203  0639  0833               	movf	sprintf@c,w
  2204  063A  00A3               	movwf	??_sprintf
  2205  063B  0723               	addwf	??_sprintf,w
  2206  063C  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2207  063D  0084               	movwf	4
  2208  063E  120A  118A  200D  120A  118A  	fcall	stringdir
  2209  0643  00A4               	movwf	??_sprintf+1
  2210  0644  120A  118A  200D  120A  118A  	fcall	stringdir
  2211  0649  00A5               	movwf	??_sprintf+2
  2212  064A  0825               	movf	??_sprintf+2,w
  2213  064B  022D               	subwf	sprintf@val+1,w
  2214  064C  1D03               	skipz
  2215  064D  2E50               	goto	u1685
  2216  064E  0824               	movf	??_sprintf+1,w
  2217  064F  022C               	subwf	sprintf@val,w
  2218  0650                     u1685:	
  2219  0650  1C03               	btfss	3,0
  2220  0651  2E88               	goto	l1784
  2221  0652  3001               	movlw	1
  2222  0653  00A3               	movwf	??_sprintf
  2223  0654  0823               	movf	??_sprintf,w
  2224  0655  07B3               	addwf	sprintf@c,f
  2225  0656  3005               	movlw	5
  2226  0657  0633               	xorwf	sprintf@c,w
  2227  0658  1903               	btfsc	3,2
  2228  0659  2E88               	goto	l1784
  2229  065A  2E39               	goto	l1764
  2230  065B                     l252:	
  2231                           ;doprnt.c: 1333: case 0x80:
  2232                           
  2233                           
  2234                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2235  065B  01B3               	clrf	sprintf@c
  2236  065C  0AB3               	incf	sprintf@c,f
  2237  065D                     l1774:	
  2238                           
  2239                           ;doprnt.c: 1336: if(val < hexpowers[c])
  2240  065D  0833               	movf	sprintf@c,w
  2241  065E  00A3               	movwf	??_sprintf
  2242  065F  0723               	addwf	??_sprintf,w
  2243  0660  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  2244  0661  0084               	movwf	4
  2245  0662  120A  118A  200D  120A  118A  	fcall	stringdir
  2246  0667  00A4               	movwf	??_sprintf+1
  2247  0668  120A  118A  200D  120A  118A  	fcall	stringdir
  2248  066D  00A5               	movwf	??_sprintf+2
  2249  066E  0825               	movf	??_sprintf+2,w
  2250  066F  022D               	subwf	sprintf@val+1,w
  2251  0670  1D03               	skipz
  2252  0671  2E74               	goto	u1705
  2253  0672  0824               	movf	??_sprintf+1,w
  2254  0673  022C               	subwf	sprintf@val,w
  2255  0674                     u1705:	
  2256  0674  1C03               	btfss	3,0
  2257  0675  2E88               	goto	l1784
  2258  0676  3001               	movlw	1
  2259  0677  00A3               	movwf	??_sprintf
  2260  0678  0823               	movf	??_sprintf,w
  2261  0679  07B3               	addwf	sprintf@c,f
  2262  067A  3004               	movlw	4
  2263  067B  0633               	xorwf	sprintf@c,w
  2264  067C  1903               	btfsc	3,2
  2265  067D  2E88               	goto	l1784
  2266  067E  2E5D               	goto	l1774
  2267  067F                     l1782:	
  2268  067F  082F               	movf	sprintf@flag,w
  2269  0680  3980               	andlw	128
  2270                           
  2271                           ; Switch size 1, requested type "simple"
  2272                           ; Number of cases is 2, Range of values is 0 to 128
  2273                           ; switch strategies available:
  2274                           ; Name         Instructions Cycles
  2275                           ; simple_byte            7     4 (average)
  2276                           ; jumptable            260     6 (fixed)
  2277                           ;	Chosen strategy is simple_byte
  2278  0681  3A00               	xorlw	0	; case 0
  2279  0682  1903               	skipnz
  2280  0683  2E37               	goto	l247
  2281  0684  3A80               	xorlw	128	; case 128
  2282  0685  1903               	skipnz
  2283  0686  2E5B               	goto	l252
  2284  0687  2E88               	goto	l1784
  2285  0688                     l1784:	
  2286                           
  2287                           ;doprnt.c: 1358: if(c < prec)
  2288  0688  082E               	movf	sprintf@prec,w
  2289  0689  00A3               	movwf	??_sprintf
  2290  068A  01A4               	clrf	??_sprintf+1
  2291  068B  1BA3               	btfsc	??_sprintf,7
  2292  068C  03A4               	decf	??_sprintf+1,f
  2293  068D  0824               	movf	??_sprintf+1,w
  2294  068E  3A80               	xorlw	128
  2295  068F  3C80               	sublw	128
  2296  0690  1D03               	skipz
  2297  0691  2E94               	goto	u1725
  2298  0692  0823               	movf	??_sprintf,w
  2299  0693  0233               	subwf	sprintf@c,w
  2300  0694                     u1725:	
  2301  0694  1803               	skipnc
  2302  0695  2E9D               	goto	l1788
  2303                           
  2304                           ;doprnt.c: 1359: c = prec;
  2305  0696  1283               	bcf	3,5	;RP0=0, select bank0
  2306  0697  1303               	bcf	3,6	;RP1=0, select bank0
  2307  0698  082E               	movf	sprintf@prec,w
  2308  0699  00A3               	movwf	??_sprintf
  2309  069A  0823               	movf	??_sprintf,w
  2310  069B  00B3               	movwf	sprintf@c
  2311  069C  2EB5               	goto	l1792
  2312  069D                     l1788:	
  2313                           
  2314                           ;doprnt.c: 1360: else if(prec < c)
  2315  069D  1283               	bcf	3,5	;RP0=0, select bank0
  2316  069E  1303               	bcf	3,6	;RP1=0, select bank0
  2317  069F  082E               	movf	sprintf@prec,w
  2318  06A0  00A3               	movwf	??_sprintf
  2319  06A1  01A4               	clrf	??_sprintf+1
  2320  06A2  1BA3               	btfsc	??_sprintf,7
  2321  06A3  03A4               	decf	??_sprintf+1,f
  2322  06A4  0824               	movf	??_sprintf+1,w
  2323  06A5  3A80               	xorlw	128
  2324  06A6  00A5               	movwf	??_sprintf+2
  2325  06A7  3080               	movlw	128
  2326  06A8  0225               	subwf	??_sprintf+2,w
  2327  06A9  1D03               	skipz
  2328  06AA  2EAD               	goto	u1735
  2329  06AB  0833               	movf	sprintf@c,w
  2330  06AC  0223               	subwf	??_sprintf,w
  2331  06AD                     u1735:	
  2332  06AD  1803               	skipnc
  2333  06AE  2EB5               	goto	l1792
  2334                           
  2335                           ;doprnt.c: 1361: prec = c;
  2336  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  2337  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  2338  06B1  0833               	movf	sprintf@c,w
  2339  06B2  00A3               	movwf	??_sprintf
  2340  06B3  0823               	movf	??_sprintf,w
  2341  06B4  00AE               	movwf	sprintf@prec
  2342  06B5                     l1792:	
  2343                           
  2344                           ;doprnt.c: 1364: if(width && flag & 0x03)
  2345  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  2346  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  2347  06B7  0831               	movf	sprintf@width,w
  2348  06B8  0432               	iorwf	sprintf@width+1,w
  2349  06B9  1903               	btfsc	3,2
  2350  06BA  2EC5               	goto	l1798
  2351  06BB  082F               	movf	sprintf@flag,w
  2352  06BC  3903               	andlw	3
  2353  06BD  1903               	btfsc	3,2
  2354  06BE  2EC5               	goto	l1798
  2355                           
  2356                           ;doprnt.c: 1365: width--;
  2357  06BF  30FF               	movlw	255
  2358  06C0  07B1               	addwf	sprintf@width,f
  2359  06C1  1803               	skipnc
  2360  06C2  0AB2               	incf	sprintf@width+1,f
  2361  06C3  30FF               	movlw	255
  2362  06C4  07B2               	addwf	sprintf@width+1,f
  2363  06C5                     l1798:	
  2364                           
  2365                           ;doprnt.c: 1367: if(flag & 0x4000) {
  2366  06C5  1F30               	btfss	sprintf@flag+1,6
  2367  06C6  2EEA               	goto	l1806
  2368                           
  2369                           ;doprnt.c: 1368: if(width > prec)
  2370  06C7  082E               	movf	sprintf@prec,w
  2371  06C8  00A3               	movwf	??_sprintf
  2372  06C9  01A4               	clrf	??_sprintf+1
  2373  06CA  1BA3               	btfsc	??_sprintf,7
  2374  06CB  03A4               	decf	??_sprintf+1,f
  2375  06CC  0824               	movf	??_sprintf+1,w
  2376  06CD  3A80               	xorlw	128
  2377  06CE  00A5               	movwf	??_sprintf+2
  2378  06CF  0832               	movf	sprintf@width+1,w
  2379  06D0  3A80               	xorlw	128
  2380  06D1  0225               	subwf	??_sprintf+2,w
  2381  06D2  1D03               	skipz
  2382  06D3  2ED6               	goto	u1775
  2383  06D4  0831               	movf	sprintf@width,w
  2384  06D5  0223               	subwf	??_sprintf,w
  2385  06D6                     u1775:	
  2386  06D6  1803               	skipnc
  2387  06D7  2EE6               	goto	l1804
  2388                           
  2389                           ;doprnt.c: 1369: width -= prec;
  2390  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  2391  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  2392  06DA  082E               	movf	sprintf@prec,w
  2393  06DB  00A3               	movwf	??_sprintf
  2394  06DC  01A4               	clrf	??_sprintf+1
  2395  06DD  1BA3               	btfsc	??_sprintf,7
  2396  06DE  03A4               	decf	??_sprintf+1,f
  2397  06DF  0823               	movf	??_sprintf,w
  2398  06E0  02B1               	subwf	sprintf@width,f
  2399  06E1  0824               	movf	??_sprintf+1,w
  2400  06E2  1C03               	skipc
  2401  06E3  03B2               	decf	sprintf@width+1,f
  2402  06E4  02B2               	subwf	sprintf@width+1,f
  2403  06E5  2EEA               	goto	l1806
  2404  06E6                     l1804:	
  2405                           
  2406                           ;doprnt.c: 1370: else;doprnt.c: 1371: width = 0;
  2407  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  2408  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  2409  06E8  01B1               	clrf	sprintf@width
  2410  06E9  01B2               	clrf	sprintf@width+1
  2411  06EA                     l1806:	
  2412                           
  2413                           ;doprnt.c: 1372: };doprnt.c: 1400: if(width > c)
  2414  06EA  0832               	movf	sprintf@width+1,w
  2415  06EB  3A80               	xorlw	128
  2416  06EC  3C80               	sublw	128
  2417  06ED  1D03               	skipz
  2418  06EE  2EF1               	goto	u1785
  2419  06EF  0831               	movf	sprintf@width,w
  2420  06F0  0233               	subwf	sprintf@c,w
  2421  06F1                     u1785:	
  2422  06F1  1803               	skipnc
  2423  06F2  2EFF               	goto	l1810
  2424                           
  2425                           ;doprnt.c: 1401: width -= c;
  2426  06F3  1283               	bcf	3,5	;RP0=0, select bank0
  2427  06F4  1303               	bcf	3,6	;RP1=0, select bank0
  2428  06F5  0833               	movf	sprintf@c,w
  2429  06F6  00A3               	movwf	??_sprintf
  2430  06F7  01A4               	clrf	??_sprintf+1
  2431  06F8  0823               	movf	??_sprintf,w
  2432  06F9  02B1               	subwf	sprintf@width,f
  2433  06FA  0824               	movf	??_sprintf+1,w
  2434  06FB  1C03               	skipc
  2435  06FC  03B2               	decf	sprintf@width+1,f
  2436  06FD  02B2               	subwf	sprintf@width+1,f
  2437  06FE  2F03               	goto	l1812
  2438  06FF                     l1810:	
  2439                           
  2440                           ;doprnt.c: 1402: else;doprnt.c: 1403: width = 0;
  2441  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0700  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0701  01B1               	clrf	sprintf@width
  2444  0702  01B2               	clrf	sprintf@width+1
  2445  0703                     l1812:	
  2446                           
  2447                           ;doprnt.c: 1406: if(flag & 0x04) {
  2448  0703  1D2F               	btfss	sprintf@flag,2
  2449  0704  2F2A               	goto	l1828
  2450                           
  2451                           ;doprnt.c: 1411: if(flag & 0x03)
  2452  0705  082F               	movf	sprintf@flag,w
  2453  0706  3903               	andlw	3
  2454  0707  1903               	btfsc	3,2
  2455  0708  2F14               	goto	l1820
  2456                           
  2457                           ;doprnt.c: 1412: ((*sp++ = ('-')));
  2458  0709  302D               	movlw	45
  2459  070A  00A3               	movwf	??_sprintf
  2460  070B  0834               	movf	sprintf@sp,w
  2461  070C  0084               	movwf	4
  2462  070D  0823               	movf	??_sprintf,w
  2463  070E  1383               	bcf	3,7	;select IRP bank0
  2464  070F  0080               	movwf	0
  2465  0710  3001               	movlw	1
  2466  0711  00A3               	movwf	??_sprintf
  2467  0712  0823               	movf	??_sprintf,w
  2468  0713  07B4               	addwf	sprintf@sp,f
  2469  0714                     l1820:	
  2470                           
  2471                           ;doprnt.c: 1434: if(width)
  2472  0714  0831               	movf	sprintf@width,w
  2473  0715  0432               	iorwf	sprintf@width+1,w
  2474  0716  1903               	btfsc	3,2
  2475  0717  2FB5               	goto	l1858
  2476                           
  2477                           ;doprnt.c: 1436: ((*sp++ = ('0')));
  2478  0718  3030               	movlw	48
  2479  0719  00A3               	movwf	??_sprintf
  2480  071A  0834               	movf	sprintf@sp,w
  2481  071B  0084               	movwf	4
  2482  071C  0823               	movf	??_sprintf,w
  2483  071D  1383               	bcf	3,7	;select IRP bank0
  2484  071E  0080               	movwf	0
  2485  071F  3001               	movlw	1
  2486  0720  00A3               	movwf	??_sprintf
  2487  0721  0823               	movf	??_sprintf,w
  2488  0722  07B4               	addwf	sprintf@sp,f
  2489                           
  2490                           ;doprnt.c: 1437: while(--width);
  2491  0723  30FF               	movlw	255
  2492  0724  07B1               	addwf	sprintf@width,f
  2493  0725  1803               	skipnc
  2494  0726  0AB2               	incf	sprintf@width+1,f
  2495  0727  30FF               	movlw	255
  2496  0728  07B2               	addwf	sprintf@width+1,f
  2497  0729  2F14               	goto	l1820
  2498  072A                     l1828:	
  2499                           
  2500                           ;doprnt.c: 1441: {;doprnt.c: 1443: if(width;doprnt.c: 1445: && !(flag & 0x08);doprnt.c: 
      +                          1447: )
  2501  072A  0831               	movf	sprintf@width,w
  2502  072B  0432               	iorwf	sprintf@width+1,w
  2503  072C  1D03               	btfss	3,2
  2504  072D  19AF               	btfsc	sprintf@flag,3
  2505  072E  2F44               	goto	l1838
  2506  072F                     l1832:	
  2507                           
  2508                           ;doprnt.c: 1449: ((*sp++ = (' ')));
  2509  072F  3020               	movlw	32
  2510  0730  00A3               	movwf	??_sprintf
  2511  0731  0834               	movf	sprintf@sp,w
  2512  0732  0084               	movwf	4
  2513  0733  0823               	movf	??_sprintf,w
  2514  0734  1383               	bcf	3,7	;select IRP bank0
  2515  0735  0080               	movwf	0
  2516  0736  3001               	movlw	1
  2517  0737  00A3               	movwf	??_sprintf
  2518  0738  0823               	movf	??_sprintf,w
  2519  0739  07B4               	addwf	sprintf@sp,f
  2520                           
  2521                           ;doprnt.c: 1450: while(--width);
  2522  073A  30FF               	movlw	255
  2523  073B  07B1               	addwf	sprintf@width,f
  2524  073C  1803               	skipnc
  2525  073D  0AB2               	incf	sprintf@width+1,f
  2526  073E  30FF               	movlw	255
  2527  073F  07B2               	addwf	sprintf@width+1,f
  2528  0740  0831               	movf	sprintf@width,w
  2529  0741  0432               	iorwf	sprintf@width+1,w
  2530  0742  1D03               	btfss	3,2
  2531  0743  2F2F               	goto	l1832
  2532  0744                     l1838:	
  2533                           
  2534                           ;doprnt.c: 1457: if(flag & 0x03)
  2535  0744  082F               	movf	sprintf@flag,w
  2536  0745  3903               	andlw	3
  2537  0746  1903               	btfsc	3,2
  2538  0747  2FB5               	goto	l1858
  2539                           
  2540                           ;doprnt.c: 1458: ((*sp++ = ('-')));
  2541  0748  302D               	movlw	45
  2542  0749  2FAB               	goto	L3
  2543  074A                     l1844:	
  2544                           
  2545                           ;doprnt.c: 1508: c = (val / dpowers[prec]) % 10 + '0';
  2546  074A  300A               	movlw	10
  2547  074B  00F8               	movwf	___lwmod@divisor
  2548  074C  3000               	movlw	0
  2549  074D  00F9               	movwf	___lwmod@divisor+1
  2550  074E  082E               	movf	sprintf@prec,w
  2551  074F  00A3               	movwf	??_sprintf
  2552  0750  0723               	addwf	??_sprintf,w
  2553  0751  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2554  0752  0084               	movwf	4
  2555  0753  120A  118A  200D  120A  118A  	fcall	stringdir
  2556  0758  00F0               	movwf	___lwdiv@divisor
  2557  0759  120A  118A  200D  120A  118A  	fcall	stringdir
  2558  075E  00F1               	movwf	___lwdiv@divisor+1
  2559  075F  082D               	movf	sprintf@val+1,w
  2560  0760  00F3               	movwf	___lwdiv@dividend+1
  2561  0761  082C               	movf	sprintf@val,w
  2562  0762  00F2               	movwf	___lwdiv@dividend
  2563  0763  120A  158A  25AB  120A  118A  	fcall	___lwdiv
  2564  0768  0871               	movf	?___lwdiv+1,w
  2565  0769  00FB               	movwf	___lwmod@dividend+1
  2566  076A  0870               	movf	?___lwdiv,w
  2567  076B  00FA               	movwf	___lwmod@dividend
  2568  076C  120A  158A  2541  120A  118A  	fcall	___lwmod
  2569  0771  0878               	movf	?___lwmod,w
  2570  0772  3E30               	addlw	48
  2571  0773  00A4               	movwf	??_sprintf+1
  2572  0774  0824               	movf	??_sprintf+1,w
  2573  0775  2F9F               	goto	L2
  2574  0776                     l1846:	
  2575                           ;doprnt.c: 1510: break;
  2576                           
  2577                           
  2578                           ;doprnt.c: 1518: {;doprnt.c: 1519: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2579  0776  082E               	movf	sprintf@prec,w
  2580  0777  00A3               	movwf	??_sprintf
  2581  0778  0723               	addwf	??_sprintf,w
  2582  0779  3E0B               	addlw	low ((_hexpowers-__stringbase)| (0+32768))
  2583  077A  0084               	movwf	4
  2584  077B  120A  118A  200D  120A  118A  	fcall	stringdir
  2585  0780  00F0               	movwf	___lwdiv@divisor
  2586  0781  120A  118A  200D  120A  118A  	fcall	stringdir
  2587  0786  00F1               	movwf	___lwdiv@divisor+1
  2588  0787  082D               	movf	sprintf@val+1,w
  2589  0788  00F3               	movwf	___lwdiv@dividend+1
  2590  0789  082C               	movf	sprintf@val,w
  2591  078A  00F2               	movwf	___lwdiv@dividend
  2592  078B  120A  158A  25AB  120A  118A  	fcall	___lwdiv
  2593  0790  0870               	movf	?___lwdiv,w
  2594  0791  390F               	andlw	15
  2595  0792  00A4               	movwf	??_sprintf+1
  2596  0793  0824               	movf	??_sprintf+1,w
  2597  0794  00A6               	movwf	sprintf@idx
  2598                           
  2599                           ;doprnt.c: 1525: c = "0123456789abcdef"[idx];
  2600  0795  0826               	movf	sprintf@idx,w
  2601  0796  3E13               	addlw	low ((STR_32-__stringbase)| (0+32768))
  2602  0797  0084               	movwf	4
  2603  0798  120A  118A  200D  120A  118A  	fcall	stringdir
  2604  079D  00A3               	movwf	??_sprintf
  2605  079E  0823               	movf	??_sprintf,w
  2606  079F                     L2:	
  2607  079F  00B3               	movwf	sprintf@c
  2608                           
  2609                           ;doprnt.c: 1527: };doprnt.c: 1529: break;
  2610  07A0  2FAA               	goto	l1854
  2611  07A1                     l1852:	
  2612  07A1  082F               	movf	sprintf@flag,w
  2613  07A2  3980               	andlw	128
  2614                           
  2615                           ; Switch size 1, requested type "simple"
  2616                           ; Number of cases is 2, Range of values is 0 to 128
  2617                           ; switch strategies available:
  2618                           ; Name         Instructions Cycles
  2619                           ; simple_byte            7     4 (average)
  2620                           ; jumptable            260     6 (fixed)
  2621                           ;	Chosen strategy is simple_byte
  2622  07A3  3A00               	xorlw	0	; case 0
  2623  07A4  1903               	skipnz
  2624  07A5  2F4A               	goto	l1844
  2625  07A6  3A80               	xorlw	128	; case 128
  2626  07A7  1903               	skipnz
  2627  07A8  2F76               	goto	l1846
  2628  07A9  2FAA               	goto	l1854
  2629  07AA                     l1854:	
  2630                           
  2631                           ;doprnt.c: 1543: ((*sp++ = (c)));
  2632  07AA  0833               	movf	sprintf@c,w
  2633  07AB                     L3:	
  2634  07AB  00A3               	movwf	??_sprintf
  2635  07AC  0834               	movf	sprintf@sp,w
  2636  07AD  0084               	movwf	4
  2637  07AE  0823               	movf	??_sprintf,w
  2638  07AF  1383               	bcf	3,7	;select IRP bank0
  2639  07B0  0080               	movwf	0
  2640  07B1  3001               	movlw	1
  2641  07B2  00A3               	movwf	??_sprintf
  2642  07B3  0823               	movf	??_sprintf,w
  2643  07B4  07B4               	addwf	sprintf@sp,f
  2644  07B5                     l1858:	
  2645  07B5  30FF               	movlw	255
  2646  07B6  00A3               	movwf	??_sprintf
  2647  07B7  0823               	movf	??_sprintf,w
  2648  07B8  07AE               	addwf	sprintf@prec,f
  2649  07B9  0A2E               	incf	sprintf@prec,w
  2650  07BA  1D03               	btfss	3,2
  2651  07BB  2FA1               	goto	l1852
  2652                           
  2653                           ;doprnt.c: 1544: };doprnt.c: 1547: if((flag & 0x08) && width > 0)
  2654  07BC  1DAF               	btfss	sprintf@flag,3
  2655  07BD  2C73               	goto	l1868
  2656  07BE  0832               	movf	sprintf@width+1,w
  2657  07BF  3A80               	xorlw	128
  2658  07C0  00FF               	movwf	127
  2659  07C1  3080               	movlw	128
  2660  07C2  027F               	subwf	127,w
  2661  07C3  1D03               	skipz
  2662  07C4  2FC7               	goto	u1895
  2663  07C5  3001               	movlw	1
  2664  07C6  0231               	subwf	sprintf@width,w
  2665  07C7                     u1895:	
  2666  07C7  1C03               	skipc
  2667  07C8  2C73               	goto	l1868
  2668  07C9                     l1862:	
  2669                           
  2670                           ;doprnt.c: 1549: ((*sp++ = (' ')));
  2671  07C9  3020               	movlw	32
  2672  07CA  1283               	bcf	3,5	;RP0=0, select bank0
  2673  07CB  1303               	bcf	3,6	;RP1=0, select bank0
  2674  07CC  00A3               	movwf	??_sprintf
  2675  07CD  0834               	movf	sprintf@sp,w
  2676  07CE  0084               	movwf	4
  2677  07CF  0823               	movf	??_sprintf,w
  2678  07D0  1383               	bcf	3,7	;select IRP bank0
  2679  07D1  0080               	movwf	0
  2680  07D2  3001               	movlw	1
  2681  07D3  00A3               	movwf	??_sprintf
  2682  07D4  0823               	movf	??_sprintf,w
  2683  07D5  07B4               	addwf	sprintf@sp,f
  2684                           
  2685                           ;doprnt.c: 1550: while(--width);
  2686  07D6  30FF               	movlw	255
  2687  07D7  07B1               	addwf	sprintf@width,f
  2688  07D8  1803               	skipnc
  2689  07D9  0AB2               	incf	sprintf@width+1,f
  2690  07DA  30FF               	movlw	255
  2691  07DB  07B2               	addwf	sprintf@width+1,f
  2692  07DC  0831               	movf	sprintf@width,w
  2693  07DD  0432               	iorwf	sprintf@width+1,w
  2694  07DE  1903               	btfsc	3,2
  2695  07DF  2C73               	goto	l1868
  2696  07E0  2FC9               	goto	l1862
  2697  07E1                     l1870:	
  2698                           
  2699                           ;doprnt.c: 1557: *sp = 0;
  2700  07E1  0834               	movf	sprintf@sp,w
  2701  07E2  0084               	movwf	4
  2702  07E3  1383               	bcf	3,7	;select IRP bank0
  2703  07E4  0180               	clrf	0
  2704  07E5  0008               	return
  2705  07E6                     __end_of_sprintf:	
  2706                           
  2707                           	psect	text2
  2708  0D22                     __ptext2:	
  2709 ;; *************** function _isdigit *****************
  2710 ;; Defined at:
  2711 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\isdigit.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  c               1    wreg     unsigned char 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  c               1    1[COMMON] unsigned char 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;		None               void
  2718 ;; Registers used:
  2719 ;;		wreg, status,2, status,0
  2720 ;; Tracked objects:
  2721 ;;		On entry : 300/0
  2722 ;;		On exit  : 300/0
  2723 ;;		Unchanged: 300/0
  2724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2725 ;;      Params:         0       0       0       0       0
  2726 ;;      Locals:         2       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0
  2728 ;;      Totals:         2       0       0       0       0
  2729 ;;Total ram usage:        2 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_sprintf
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           
  2739                           ;psect for function _isdigit
  2740  0D22                     _isdigit:	
  2741                           
  2742                           ;incstack = 0
  2743                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  2744                           ;isdigit@c stored from wreg
  2745  0D22  00F1               	movwf	isdigit@c
  2746  0D23  01F0               	clrf	_isdigit$643
  2747  0D24  303A               	movlw	58
  2748  0D25  0271               	subwf	isdigit@c,w
  2749  0D26  1803               	skipnc
  2750  0D27  2D2E               	goto	l1486
  2751  0D28  3030               	movlw	48
  2752  0D29  0271               	subwf	isdigit@c,w
  2753  0D2A  1C03               	skipc
  2754  0D2B  2D2E               	goto	l1486
  2755  0D2C  01F0               	clrf	_isdigit$643
  2756  0D2D  0AF0               	incf	_isdigit$643,f
  2757  0D2E                     l1486:	
  2758  0D2E  0C70               	rrf	_isdigit$643,w
  2759  0D2F  0008               	return
  2760  0D30                     __end_of_isdigit:	
  2761                           
  2762                           	psect	text3
  2763  0070                     __ptext3:	
  2764 ;; *************** function ___wmul *****************
  2765 ;; Defined at:
  2766 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  multiplier      2    0[COMMON] unsigned int 
  2769 ;;  multiplicand    2    2[COMMON] unsigned int 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  product         2    4[COMMON] unsigned int 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  2    0[COMMON] unsigned int 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0
  2776 ;; Tracked objects:
  2777 ;;		On entry : 300/0
  2778 ;;		On exit  : 300/0
  2779 ;;		Unchanged: 300/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2781 ;;      Params:         4       0       0       0       0
  2782 ;;      Locals:         2       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0
  2784 ;;      Totals:         6       0       0       0       0
  2785 ;;Total ram usage:        6 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_sprintf
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           
  2795                           ;psect for function ___wmul
  2796  0070                     ___wmul:	
  2797                           
  2798                           ;incstack = 0
  2799                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2800  0070  01F4               	clrf	___wmul@product
  2801  0071  01F5               	clrf	___wmul@product+1
  2802  0072                     l1492:	
  2803  0072  1C70               	btfss	___wmul@multiplier,0
  2804  0073  287A               	goto	l290
  2805  0074  0872               	movf	___wmul@multiplicand,w
  2806  0075  07F4               	addwf	___wmul@product,f
  2807  0076  1803               	skipnc
  2808  0077  0AF5               	incf	___wmul@product+1,f
  2809  0078  0873               	movf	___wmul@multiplicand+1,w
  2810  0079  07F5               	addwf	___wmul@product+1,f
  2811  007A                     l290:	
  2812  007A  3001               	movlw	1
  2813  007B                     u1225:	
  2814  007B  1003               	clrc
  2815  007C  0DF2               	rlf	___wmul@multiplicand,f
  2816  007D  0DF3               	rlf	___wmul@multiplicand+1,f
  2817  007E  3EFF               	addlw	-1
  2818  007F  1D03               	skipz
  2819  0080  287B               	goto	u1225
  2820  0081  3001               	movlw	1
  2821  0082                     u1235:	
  2822  0082  1003               	clrc
  2823  0083  0CF1               	rrf	___wmul@multiplier+1,f
  2824  0084  0CF0               	rrf	___wmul@multiplier,f
  2825  0085  3EFF               	addlw	-1
  2826  0086  1D03               	skipz
  2827  0087  2882               	goto	u1235
  2828  0088  0870               	movf	___wmul@multiplier,w
  2829  0089  0471               	iorwf	___wmul@multiplier+1,w
  2830  008A  1D03               	btfss	3,2
  2831  008B  2872               	goto	l1492
  2832  008C  0875               	movf	___wmul@product+1,w
  2833  008D  00F1               	movwf	?___wmul+1
  2834  008E  0874               	movf	___wmul@product,w
  2835  008F  00F0               	movwf	?___wmul
  2836  0090  0008               	return
  2837  0091                     __end_of___wmul:	
  2838                           
  2839                           	psect	text4
  2840  0D41                     __ptext4:	
  2841 ;; *************** function ___lwmod *****************
  2842 ;; Defined at:
  2843 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwmod.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;  divisor         2    8[COMMON] unsigned int 
  2846 ;;  dividend        2   10[COMMON] unsigned int 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;  counter         1   13[COMMON] unsigned char 
  2849 ;; Return value:  Size  Location     Type
  2850 ;;                  2    8[COMMON] unsigned int 
  2851 ;; Registers used:
  2852 ;;		wreg, status,2, status,0
  2853 ;; Tracked objects:
  2854 ;;		On entry : 300/0
  2855 ;;		On exit  : 300/0
  2856 ;;		Unchanged: 300/0
  2857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2858 ;;      Params:         4       0       0       0       0
  2859 ;;      Locals:         1       0       0       0       0
  2860 ;;      Temps:          1       0       0       0       0
  2861 ;;      Totals:         6       0       0       0       0
  2862 ;;Total ram usage:        6 bytes
  2863 ;; Hardware stack levels used:    1
  2864 ;; This function calls:
  2865 ;;		Nothing
  2866 ;; This function is called by:
  2867 ;;		_sprintf
  2868 ;; This function uses a non-reentrant model
  2869 ;;
  2870                           
  2871                           
  2872                           ;psect for function ___lwmod
  2873  0D41                     ___lwmod:	
  2874                           
  2875                           ;incstack = 0
  2876                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2877  0D41  0878               	movf	___lwmod@divisor,w
  2878  0D42  0479               	iorwf	___lwmod@divisor+1,w
  2879  0D43  1903               	btfsc	3,2
  2880  0D44  2D6E               	goto	l1576
  2881  0D45  01FD               	clrf	___lwmod@counter
  2882  0D46  0AFD               	incf	___lwmod@counter,f
  2883  0D47                     l1566:	
  2884  0D47  1BF9               	btfsc	___lwmod@divisor+1,7
  2885  0D48  2D55               	goto	l1568
  2886  0D49  3001               	movlw	1
  2887  0D4A                     u1405:	
  2888  0D4A  1003               	clrc
  2889  0D4B  0DF8               	rlf	___lwmod@divisor,f
  2890  0D4C  0DF9               	rlf	___lwmod@divisor+1,f
  2891  0D4D  3EFF               	addlw	-1
  2892  0D4E  1D03               	skipz
  2893  0D4F  2D4A               	goto	u1405
  2894  0D50  3001               	movlw	1
  2895  0D51  00FC               	movwf	??___lwmod
  2896  0D52  087C               	movf	??___lwmod,w
  2897  0D53  07FD               	addwf	___lwmod@counter,f
  2898  0D54  2D47               	goto	l1566
  2899  0D55                     l1568:	
  2900  0D55  0879               	movf	___lwmod@divisor+1,w
  2901  0D56  027B               	subwf	___lwmod@dividend+1,w
  2902  0D57  1D03               	skipz
  2903  0D58  2D5B               	goto	u1425
  2904  0D59  0878               	movf	___lwmod@divisor,w
  2905  0D5A  027A               	subwf	___lwmod@dividend,w
  2906  0D5B                     u1425:	
  2907  0D5B  1C03               	skipc
  2908  0D5C  2D63               	goto	l1572
  2909  0D5D  0878               	movf	___lwmod@divisor,w
  2910  0D5E  02FA               	subwf	___lwmod@dividend,f
  2911  0D5F  0879               	movf	___lwmod@divisor+1,w
  2912  0D60  1C03               	skipc
  2913  0D61  03FB               	decf	___lwmod@dividend+1,f
  2914  0D62  02FB               	subwf	___lwmod@dividend+1,f
  2915  0D63                     l1572:	
  2916  0D63  3001               	movlw	1
  2917  0D64                     u1435:	
  2918  0D64  1003               	clrc
  2919  0D65  0CF9               	rrf	___lwmod@divisor+1,f
  2920  0D66  0CF8               	rrf	___lwmod@divisor,f
  2921  0D67  3EFF               	addlw	-1
  2922  0D68  1D03               	skipz
  2923  0D69  2D64               	goto	u1435
  2924  0D6A  3001               	movlw	1
  2925  0D6B  02FD               	subwf	___lwmod@counter,f
  2926  0D6C  1D03               	btfss	3,2
  2927  0D6D  2D55               	goto	l1568
  2928  0D6E                     l1576:	
  2929  0D6E  087B               	movf	___lwmod@dividend+1,w
  2930  0D6F  00F9               	movwf	?___lwmod+1
  2931  0D70  087A               	movf	___lwmod@dividend,w
  2932  0D71  00F8               	movwf	?___lwmod
  2933  0D72  0008               	return
  2934  0D73                     __end_of___lwmod:	
  2935                           
  2936                           	psect	text5
  2937  0DAB                     __ptext5:	
  2938 ;; *************** function ___lwdiv *****************
  2939 ;; Defined at:
  2940 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\lwdiv.c"
  2941 ;; Parameters:    Size  Location     Type
  2942 ;;  divisor         2    0[COMMON] unsigned int 
  2943 ;;  dividend        2    2[COMMON] unsigned int 
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  quotient        2    5[COMMON] unsigned int 
  2946 ;;  counter         1    7[COMMON] unsigned char 
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  2    0[COMMON] unsigned int 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0
  2951 ;; Tracked objects:
  2952 ;;		On entry : 300/0
  2953 ;;		On exit  : 300/0
  2954 ;;		Unchanged: 300/0
  2955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2956 ;;      Params:         4       0       0       0       0
  2957 ;;      Locals:         3       0       0       0       0
  2958 ;;      Temps:          1       0       0       0       0
  2959 ;;      Totals:         8       0       0       0       0
  2960 ;;Total ram usage:        8 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; This function calls:
  2963 ;;		Nothing
  2964 ;; This function is called by:
  2965 ;;		_sprintf
  2966 ;; This function uses a non-reentrant model
  2967 ;;
  2968                           
  2969                           
  2970                           ;psect for function ___lwdiv
  2971  0DAB                     ___lwdiv:	
  2972                           
  2973                           ;incstack = 0
  2974                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2975  0DAB  01F5               	clrf	___lwdiv@quotient
  2976  0DAC  01F6               	clrf	___lwdiv@quotient+1
  2977  0DAD  0870               	movf	___lwdiv@divisor,w
  2978  0DAE  0471               	iorwf	___lwdiv@divisor+1,w
  2979  0DAF  1903               	btfsc	3,2
  2980  0DB0  2DE2               	goto	l1554
  2981  0DB1  01F7               	clrf	___lwdiv@counter
  2982  0DB2  0AF7               	incf	___lwdiv@counter,f
  2983  0DB3                     l1542:	
  2984  0DB3  1BF1               	btfsc	___lwdiv@divisor+1,7
  2985  0DB4  2DC1               	goto	l1544
  2986  0DB5  3001               	movlw	1
  2987  0DB6                     u1335:	
  2988  0DB6  1003               	clrc
  2989  0DB7  0DF0               	rlf	___lwdiv@divisor,f
  2990  0DB8  0DF1               	rlf	___lwdiv@divisor+1,f
  2991  0DB9  3EFF               	addlw	-1
  2992  0DBA  1D03               	skipz
  2993  0DBB  2DB6               	goto	u1335
  2994  0DBC  3001               	movlw	1
  2995  0DBD  00F4               	movwf	??___lwdiv
  2996  0DBE  0874               	movf	??___lwdiv,w
  2997  0DBF  07F7               	addwf	___lwdiv@counter,f
  2998  0DC0  2DB3               	goto	l1542
  2999  0DC1                     l1544:	
  3000  0DC1  3001               	movlw	1
  3001  0DC2                     u1355:	
  3002  0DC2  1003               	clrc
  3003  0DC3  0DF5               	rlf	___lwdiv@quotient,f
  3004  0DC4  0DF6               	rlf	___lwdiv@quotient+1,f
  3005  0DC5  3EFF               	addlw	-1
  3006  0DC6  1D03               	skipz
  3007  0DC7  2DC2               	goto	u1355
  3008  0DC8  0871               	movf	___lwdiv@divisor+1,w
  3009  0DC9  0273               	subwf	___lwdiv@dividend+1,w
  3010  0DCA  1D03               	skipz
  3011  0DCB  2DCE               	goto	u1365
  3012  0DCC  0870               	movf	___lwdiv@divisor,w
  3013  0DCD  0272               	subwf	___lwdiv@dividend,w
  3014  0DCE                     u1365:	
  3015  0DCE  1C03               	skipc
  3016  0DCF  2DD7               	goto	l1550
  3017  0DD0  0870               	movf	___lwdiv@divisor,w
  3018  0DD1  02F2               	subwf	___lwdiv@dividend,f
  3019  0DD2  0871               	movf	___lwdiv@divisor+1,w
  3020  0DD3  1C03               	skipc
  3021  0DD4  03F3               	decf	___lwdiv@dividend+1,f
  3022  0DD5  02F3               	subwf	___lwdiv@dividend+1,f
  3023  0DD6  1475               	bsf	___lwdiv@quotient,0
  3024  0DD7                     l1550:	
  3025  0DD7  3001               	movlw	1
  3026  0DD8                     u1375:	
  3027  0DD8  1003               	clrc
  3028  0DD9  0CF1               	rrf	___lwdiv@divisor+1,f
  3029  0DDA  0CF0               	rrf	___lwdiv@divisor,f
  3030  0DDB  3EFF               	addlw	-1
  3031  0DDC  1D03               	skipz
  3032  0DDD  2DD8               	goto	u1375
  3033  0DDE  3001               	movlw	1
  3034  0DDF  02F7               	subwf	___lwdiv@counter,f
  3035  0DE0  1D03               	btfss	3,2
  3036  0DE1  2DC1               	goto	l1544
  3037  0DE2                     l1554:	
  3038  0DE2  0876               	movf	___lwdiv@quotient+1,w
  3039  0DE3  00F1               	movwf	?___lwdiv+1
  3040  0DE4  0875               	movf	___lwdiv@quotient,w
  3041  0DE5  00F0               	movwf	?___lwdiv
  3042  0DE6  0008               	return
  3043  0DE7                     __end_of___lwdiv:	
  3044                           
  3045                           	psect	text6
  3046  0D30                     __ptext6:	
  3047 ;; *************** function ___bmul *****************
  3048 ;; Defined at:
  3049 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul8.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  multiplier      1    wreg     unsigned char 
  3052 ;;  multiplicand    1    0[COMMON] unsigned char 
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;  multiplier      1    3[COMMON] unsigned char 
  3055 ;;  product         1    2[COMMON] unsigned char 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      unsigned char 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2, status,0
  3060 ;; Tracked objects:
  3061 ;;		On entry : 300/0
  3062 ;;		On exit  : 300/0
  3063 ;;		Unchanged: 300/0
  3064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3065 ;;      Params:         1       0       0       0       0
  3066 ;;      Locals:         2       0       0       0       0
  3067 ;;      Temps:          1       0       0       0       0
  3068 ;;      Totals:         4       0       0       0       0
  3069 ;;Total ram usage:        4 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_sprintf
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           
  3079                           ;psect for function ___bmul
  3080  0D30                     ___bmul:	
  3081                           
  3082                           ;incstack = 0
  3083                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3084                           ;___bmul@multiplier stored from wreg
  3085  0D30  00F3               	movwf	___bmul@multiplier
  3086  0D31  01F2               	clrf	___bmul@product
  3087  0D32                     l1520:	
  3088  0D32  1C73               	btfss	___bmul@multiplier,0
  3089  0D33  2D38               	goto	l1524
  3090  0D34  0870               	movf	___bmul@multiplicand,w
  3091  0D35  00F1               	movwf	??___bmul
  3092  0D36  0871               	movf	??___bmul,w
  3093  0D37  07F2               	addwf	___bmul@product,f
  3094  0D38                     l1524:	
  3095  0D38  1003               	clrc
  3096  0D39  0DF0               	rlf	___bmul@multiplicand,f
  3097  0D3A  1003               	clrc
  3098  0D3B  0CF3               	rrf	___bmul@multiplier,f
  3099  0D3C  0873               	movf	___bmul@multiplier,w
  3100  0D3D  1D03               	btfss	3,2
  3101  0D3E  2D32               	goto	l1520
  3102  0D3F  0872               	movf	___bmul@product,w
  3103  0D40  0008               	return
  3104  0D41                     __end_of___bmul:	
  3105                           
  3106                           	psect	text7
  3107  0E26                     __ptext7:	
  3108 ;; *************** function _rand *****************
  3109 ;; Defined at:
  3110 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\rand.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;		None
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;		None
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  2    0[BANK0 ] int 
  3117 ;; Registers used:
  3118 ;;		wreg, status,2, status,0, pclath, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : 300/0
  3121 ;;		On exit  : 300/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3124 ;;      Params:         0       2       0       0       0
  3125 ;;      Locals:         0       0       0       0       0
  3126 ;;      Temps:          0       5       0       0       0
  3127 ;;      Totals:         0       7       0       0       0
  3128 ;;Total ram usage:        7 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    1
  3131 ;; This function calls:
  3132 ;;		___lmul
  3133 ;; This function is called by:
  3134 ;;		_main
  3135 ;; This function uses a non-reentrant model
  3136 ;;
  3137                           
  3138                           
  3139                           ;psect for function _rand
  3140  0E26                     _rand:	
  3141                           
  3142                           ;incstack = 0
  3143                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  3144  0E26  085F               	movf	_randx+3,w
  3145  0E27  00F3               	movwf	___lmul@multiplier+3
  3146  0E28  085E               	movf	_randx+2,w
  3147  0E29  00F2               	movwf	___lmul@multiplier+2
  3148  0E2A  085D               	movf	_randx+1,w
  3149  0E2B  00F1               	movwf	___lmul@multiplier+1
  3150  0E2C  085C               	movf	_randx,w
  3151  0E2D  00F0               	movwf	___lmul@multiplier
  3152  0E2E  3041               	movlw	65
  3153  0E2F  00F7               	movwf	___lmul@multiplicand+3
  3154  0E30  30C6               	movlw	198
  3155  0E31  00F6               	movwf	___lmul@multiplicand+2
  3156  0E32  304E               	movlw	78
  3157  0E33  00F5               	movwf	___lmul@multiplicand+1
  3158  0E34  306D               	movlw	109
  3159  0E35  00F4               	movwf	___lmul@multiplicand
  3160  0E36  120A  158A  25E7  120A  158A  	fcall	___lmul
  3161  0E3B  0873               	movf	?___lmul+3,w
  3162  0E3C  00DF               	movwf	_randx+3
  3163  0E3D  0872               	movf	?___lmul+2,w
  3164  0E3E  00DE               	movwf	_randx+2
  3165  0E3F  0871               	movf	?___lmul+1,w
  3166  0E40  00DD               	movwf	_randx+1
  3167  0E41  0870               	movf	?___lmul,w
  3168  0E42  00DC               	movwf	_randx
  3169  0E43  3039               	movlw	57
  3170  0E44  07DC               	addwf	_randx,f
  3171  0E45  3030               	movlw	48
  3172  0E46  1803               	skipnc
  3173  0E47  3031               	movlw	49
  3174  0E48  07DD               	addwf	_randx+1,f
  3175  0E49  3000               	movlw	0
  3176  0E4A  1803               	skipnc
  3177  0E4B  3001               	movlw	1
  3178  0E4C  07DE               	addwf	_randx+2,f
  3179  0E4D  3000               	movlw	0
  3180  0E4E  1803               	skipnc
  3181  0E4F  3001               	movlw	1
  3182  0E50  07DF               	addwf	_randx+3,f
  3183  0E51  085C               	movf	_randx,w
  3184  0E52  00A2               	movwf	??_rand
  3185  0E53  085D               	movf	_randx+1,w
  3186  0E54  00A3               	movwf	??_rand+1
  3187  0E55  085E               	movf	_randx+2,w
  3188  0E56  00A4               	movwf	??_rand+2
  3189  0E57  085F               	movf	_randx+3,w
  3190  0E58  00A5               	movwf	??_rand+3
  3191  0E59  3010               	movlw	16
  3192  0E5A  00A6               	movwf	??_rand+4
  3193  0E5B                     u1475:	
  3194  0E5B  0D25               	rlf	??_rand+3,w
  3195  0E5C  0CA5               	rrf	??_rand+3,f
  3196  0E5D  0CA4               	rrf	??_rand+2,f
  3197  0E5E  0CA3               	rrf	??_rand+1,f
  3198  0E5F  0CA2               	rrf	??_rand,f
  3199  0E60  0BA6               	decfsz	??_rand+4,f
  3200  0E61  2E5B               	goto	u1475
  3201  0E62  30FF               	movlw	255
  3202  0E63  0522               	andwf	??_rand,w
  3203  0E64  00A0               	movwf	?_rand
  3204  0E65  307F               	movlw	127
  3205  0E66  0523               	andwf	??_rand+1,w
  3206  0E67  00A1               	movwf	?_rand+1
  3207  0E68  0008               	return
  3208  0E69                     __end_of_rand:	
  3209                           
  3210                           	psect	text8
  3211  0DE7                     __ptext8:	
  3212 ;; *************** function ___lmul *****************
  3213 ;; Defined at:
  3214 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul32.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  multiplier      4    0[COMMON] unsigned long 
  3217 ;;  multiplicand    4    4[COMMON] unsigned long 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  product         4    9[COMMON] unsigned long 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  4    0[COMMON] unsigned long 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0
  3224 ;; Tracked objects:
  3225 ;;		On entry : 300/0
  3226 ;;		On exit  : 300/0
  3227 ;;		Unchanged: 300/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3229 ;;      Params:         8       0       0       0       0
  3230 ;;      Locals:         4       0       0       0       0
  3231 ;;      Temps:          1       0       0       0       0
  3232 ;;      Totals:        13       0       0       0       0
  3233 ;;Total ram usage:       13 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; This function calls:
  3236 ;;		Nothing
  3237 ;; This function is called by:
  3238 ;;		_rand
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           
  3243                           ;psect for function ___lmul
  3244  0DE7                     ___lmul:	
  3245                           
  3246                           ;incstack = 0
  3247                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3248  0DE7  3000               	movlw	0
  3249  0DE8  00FC               	movwf	___lmul@product+3
  3250  0DE9  3000               	movlw	0
  3251  0DEA  00FB               	movwf	___lmul@product+2
  3252  0DEB  3000               	movlw	0
  3253  0DEC  00FA               	movwf	___lmul@product+1
  3254  0DED  3000               	movlw	0
  3255  0DEE  00F9               	movwf	___lmul@product
  3256  0DEF                     l1506:	
  3257  0DEF  1C70               	btfss	___lmul@multiplier,0
  3258  0DF0  2E05               	goto	l1510
  3259  0DF1  0874               	movf	___lmul@multiplicand,w
  3260  0DF2  07F9               	addwf	___lmul@product,f
  3261  0DF3  0875               	movf	___lmul@multiplicand+1,w
  3262  0DF4  1103               	clrz
  3263  0DF5  1803               	skipnc
  3264  0DF6  3E01               	addlw	1
  3265  0DF7  1D03               	btfss	3,2
  3266  0DF8  07FA               	addwf	___lmul@product+1,f
  3267  0DF9  0876               	movf	___lmul@multiplicand+2,w
  3268  0DFA  1103               	clrz
  3269  0DFB  1803               	skipnc
  3270  0DFC  3E01               	addlw	1
  3271  0DFD  1D03               	btfss	3,2
  3272  0DFE  07FB               	addwf	___lmul@product+2,f
  3273  0DFF  0877               	movf	___lmul@multiplicand+3,w
  3274  0E00  1103               	clrz
  3275  0E01  1803               	skipnc
  3276  0E02  3E01               	addlw	1
  3277  0E03  1D03               	btfss	3,2
  3278  0E04  07FC               	addwf	___lmul@product+3,f
  3279  0E05                     l1510:	
  3280  0E05  3001               	movlw	1
  3281  0E06  00F8               	movwf	??___lmul
  3282  0E07                     u1275:	
  3283  0E07  1003               	clrc
  3284  0E08  0DF4               	rlf	___lmul@multiplicand,f
  3285  0E09  0DF5               	rlf	___lmul@multiplicand+1,f
  3286  0E0A  0DF6               	rlf	___lmul@multiplicand+2,f
  3287  0E0B  0DF7               	rlf	___lmul@multiplicand+3,f
  3288  0E0C  0BF8               	decfsz	??___lmul,f
  3289  0E0D  2E07               	goto	u1275
  3290  0E0E  3001               	movlw	1
  3291  0E0F                     u1285:	
  3292  0E0F  1003               	clrc
  3293  0E10  0CF3               	rrf	___lmul@multiplier+3,f
  3294  0E11  0CF2               	rrf	___lmul@multiplier+2,f
  3295  0E12  0CF1               	rrf	___lmul@multiplier+1,f
  3296  0E13  0CF0               	rrf	___lmul@multiplier,f
  3297  0E14  3EFF               	addlw	-1
  3298  0E15  1D03               	skipz
  3299  0E16  2E0F               	goto	u1285
  3300  0E17  0873               	movf	___lmul@multiplier+3,w
  3301  0E18  0472               	iorwf	___lmul@multiplier+2,w
  3302  0E19  0471               	iorwf	___lmul@multiplier+1,w
  3303  0E1A  0470               	iorwf	___lmul@multiplier,w
  3304  0E1B  1D03               	skipz
  3305  0E1C  2DEF               	goto	l1506
  3306  0E1D  087C               	movf	___lmul@product+3,w
  3307  0E1E  00F3               	movwf	?___lmul+3
  3308  0E1F  087B               	movf	___lmul@product+2,w
  3309  0E20  00F2               	movwf	?___lmul+2
  3310  0E21  087A               	movf	___lmul@product+1,w
  3311  0E22  00F1               	movwf	?___lmul+1
  3312  0E23  0879               	movf	___lmul@product,w
  3313  0E24  00F0               	movwf	?___lmul
  3314  0E25  0008               	return
  3315  0E26                     __end_of___lmul:	
  3316                           
  3317                           	psect	text9
  3318  0E69                     __ptext9:	
  3319 ;; *************** function ___awmod *****************
  3320 ;; Defined at:
  3321 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awmod.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  divisor         2    7[BANK0 ] int 
  3324 ;;  dividend        2    9[BANK0 ] int 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  sign            1   12[BANK0 ] unsigned char 
  3327 ;;  counter         1   11[BANK0 ] unsigned char 
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  2    7[BANK0 ] int 
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0
  3332 ;; Tracked objects:
  3333 ;;		On entry : 300/0
  3334 ;;		On exit  : 300/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3337 ;;      Params:         0       4       0       0       0
  3338 ;;      Locals:         0       2       0       0       0
  3339 ;;      Temps:          1       0       0       0       0
  3340 ;;      Totals:         1       6       0       0       0
  3341 ;;Total ram usage:        7 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_main
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           
  3351                           ;psect for function ___awmod
  3352  0E69                     ___awmod:	
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3356  0E69  01AC               	clrf	___awmod@sign
  3357  0E6A  1FAA               	btfss	___awmod@dividend+1,7
  3358  0E6B  2E73               	goto	l1882
  3359  0E6C  09A9               	comf	___awmod@dividend,f
  3360  0E6D  09AA               	comf	___awmod@dividend+1,f
  3361  0E6E  0AA9               	incf	___awmod@dividend,f
  3362  0E6F  1903               	skipnz
  3363  0E70  0AAA               	incf	___awmod@dividend+1,f
  3364  0E71  01AC               	clrf	___awmod@sign
  3365  0E72  0AAC               	incf	___awmod@sign,f
  3366  0E73                     l1882:	
  3367  0E73  1FA8               	btfss	___awmod@divisor+1,7
  3368  0E74  2E7A               	goto	l1886
  3369  0E75  09A7               	comf	___awmod@divisor,f
  3370  0E76  09A8               	comf	___awmod@divisor+1,f
  3371  0E77  0AA7               	incf	___awmod@divisor,f
  3372  0E78  1903               	skipnz
  3373  0E79  0AA8               	incf	___awmod@divisor+1,f
  3374  0E7A                     l1886:	
  3375  0E7A  0827               	movf	___awmod@divisor,w
  3376  0E7B  0428               	iorwf	___awmod@divisor+1,w
  3377  0E7C  1903               	btfsc	3,2
  3378  0E7D  2EA7               	goto	l1904
  3379  0E7E  01AB               	clrf	___awmod@counter
  3380  0E7F  0AAB               	incf	___awmod@counter,f
  3381  0E80                     l1894:	
  3382  0E80  1BA8               	btfsc	___awmod@divisor+1,7
  3383  0E81  2E8E               	goto	l1896
  3384  0E82  3001               	movlw	1
  3385  0E83                     u1955:	
  3386  0E83  1003               	clrc
  3387  0E84  0DA7               	rlf	___awmod@divisor,f
  3388  0E85  0DA8               	rlf	___awmod@divisor+1,f
  3389  0E86  3EFF               	addlw	-1
  3390  0E87  1D03               	skipz
  3391  0E88  2E83               	goto	u1955
  3392  0E89  3001               	movlw	1
  3393  0E8A  00FD               	movwf	??___awmod
  3394  0E8B  087D               	movf	??___awmod,w
  3395  0E8C  07AB               	addwf	___awmod@counter,f
  3396  0E8D  2E80               	goto	l1894
  3397  0E8E                     l1896:	
  3398  0E8E  0828               	movf	___awmod@divisor+1,w
  3399  0E8F  022A               	subwf	___awmod@dividend+1,w
  3400  0E90  1D03               	skipz
  3401  0E91  2E94               	goto	u1975
  3402  0E92  0827               	movf	___awmod@divisor,w
  3403  0E93  0229               	subwf	___awmod@dividend,w
  3404  0E94                     u1975:	
  3405  0E94  1C03               	skipc
  3406  0E95  2E9C               	goto	l1900
  3407  0E96  0827               	movf	___awmod@divisor,w
  3408  0E97  02A9               	subwf	___awmod@dividend,f
  3409  0E98  0828               	movf	___awmod@divisor+1,w
  3410  0E99  1C03               	skipc
  3411  0E9A  03AA               	decf	___awmod@dividend+1,f
  3412  0E9B  02AA               	subwf	___awmod@dividend+1,f
  3413  0E9C                     l1900:	
  3414  0E9C  3001               	movlw	1
  3415  0E9D                     u1985:	
  3416  0E9D  1003               	clrc
  3417  0E9E  0CA8               	rrf	___awmod@divisor+1,f
  3418  0E9F  0CA7               	rrf	___awmod@divisor,f
  3419  0EA0  3EFF               	addlw	-1
  3420  0EA1  1D03               	skipz
  3421  0EA2  2E9D               	goto	u1985
  3422  0EA3  3001               	movlw	1
  3423  0EA4  02AB               	subwf	___awmod@counter,f
  3424  0EA5  1D03               	btfss	3,2
  3425  0EA6  2E8E               	goto	l1896
  3426  0EA7                     l1904:	
  3427  0EA7  082C               	movf	___awmod@sign,w
  3428  0EA8  1903               	btfsc	3,2
  3429  0EA9  2EAF               	goto	l1908
  3430  0EAA  09A9               	comf	___awmod@dividend,f
  3431  0EAB  09AA               	comf	___awmod@dividend+1,f
  3432  0EAC  0AA9               	incf	___awmod@dividend,f
  3433  0EAD  1903               	skipnz
  3434  0EAE  0AAA               	incf	___awmod@dividend+1,f
  3435  0EAF                     l1908:	
  3436  0EAF  082A               	movf	___awmod@dividend+1,w
  3437  0EB0  00A8               	movwf	?___awmod+1
  3438  0EB1  0829               	movf	___awmod@dividend,w
  3439  0EB2  00A7               	movwf	?___awmod
  3440  0EB3  0008               	return
  3441  0EB4                     __end_of___awmod:	
  3442                           
  3443                           	psect	text10
  3444  0D73                     __ptext10:	
  3445 ;; *************** function _Lcd_Out2 *****************
  3446 ;; Defined at:
  3447 ;;		line 117 in file "lcd.h"
  3448 ;; Parameters:    Size  Location     Type
  3449 ;;  y               1    wreg     unsigned char 
  3450 ;;  x               1    3[COMMON] unsigned char 
  3451 ;;  buffer          1    4[COMMON] PTR unsigned char 
  3452 ;;		 -> main@imagenRaton(3), main@blanco(3), main@imagenGato(3), main@iconAtrapado(3), 
  3453 ;;		 -> main@iconVidas(8), 
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;  y               1    6[COMMON] unsigned char 
  3456 ;;  data            1    7[COMMON] unsigned char 
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      void 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 300/0
  3463 ;;		On exit  : 800/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3466 ;;      Params:         2       0       0       0       0
  3467 ;;      Locals:         2       0       0       0       0
  3468 ;;      Temps:          1       0       0       0       0
  3469 ;;      Totals:         5       0       0       0       0
  3470 ;;Total ram usage:        5 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:    1
  3473 ;; This function calls:
  3474 ;;		_Lcd_Chr_CP
  3475 ;;		_Lcd_Cmd
  3476 ;; This function is called by:
  3477 ;;		_main
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           
  3482                           ;psect for function _Lcd_Out2
  3483  0D73                     _Lcd_Out2:	
  3484                           
  3485                           ;incstack = 0
  3486                           ; Regs used in _Lcd_Out2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3487                           ;Lcd_Out2@y stored from wreg
  3488  0D73  00F6               	movwf	Lcd_Out2@y
  3489                           
  3490                           ;lcd.h: 119: unsigned char data;;lcd.h: 120: switch (y)
  3491  0D74  2D84               	goto	l1618
  3492  0D75                     l1608:	
  3493  0D75  0873               	movf	Lcd_Out2@x,w
  3494  0D76  3E80               	addlw	128
  3495  0D77  2D80               	goto	L6
  3496  0D78                     l1610:	
  3497  0D78  0873               	movf	Lcd_Out2@x,w
  3498  0D79  3EC0               	addlw	192
  3499  0D7A  2D80               	goto	L6
  3500  0D7B                     l1612:	
  3501  0D7B  0873               	movf	Lcd_Out2@x,w
  3502  0D7C  3E94               	addlw	148
  3503  0D7D  2D80               	goto	L6
  3504  0D7E                     l1614:	
  3505  0D7E  0873               	movf	Lcd_Out2@x,w
  3506  0D7F  3ED4               	addlw	212
  3507  0D80                     L6:	
  3508  0D80  00F5               	movwf	??_Lcd_Out2
  3509  0D81  0875               	movf	??_Lcd_Out2,w
  3510  0D82  00F7               	movwf	Lcd_Out2@data
  3511  0D83  2D92               	goto	l1620
  3512  0D84                     l1618:	
  3513  0D84  0876               	movf	Lcd_Out2@y,w
  3514                           
  3515                           ; Switch size 1, requested type "simple"
  3516                           ; Number of cases is 4, Range of values is 1 to 4
  3517                           ; switch strategies available:
  3518                           ; Name         Instructions Cycles
  3519                           ; simple_byte           13     7 (average)
  3520                           ; direct_byte           23    11 (fixed)
  3521                           ; jumptable            263     9 (fixed)
  3522                           ;	Chosen strategy is simple_byte
  3523  0D85  3A01               	xorlw	1	; case 1
  3524  0D86  1903               	skipnz
  3525  0D87  2D75               	goto	l1608
  3526  0D88  3A03               	xorlw	3	; case 2
  3527  0D89  1903               	skipnz
  3528  0D8A  2D78               	goto	l1610
  3529  0D8B  3A01               	xorlw	1	; case 3
  3530  0D8C  1903               	skipnz
  3531  0D8D  2D7B               	goto	l1612
  3532  0D8E  3A07               	xorlw	7	; case 4
  3533  0D8F  1903               	skipnz
  3534  0D90  2D7E               	goto	l1614
  3535  0D91  2D92               	goto	l1620
  3536  0D92                     l1620:	
  3537                           
  3538                           ;lcd.h: 128: Lcd_Cmd(data);
  3539  0D92  0877               	movf	Lcd_Out2@data,w
  3540  0D93  120A  158A  2755  120A  158A  	fcall	_Lcd_Cmd
  3541  0D98                     l1626:	
  3542                           ;lcd.h: 129: while(*buffer)
  3543                           
  3544  0D98  0874               	movf	Lcd_Out2@buffer,w
  3545  0D99  0084               	movwf	4
  3546  0D9A  1383               	bcf	3,7	;select IRP bank0
  3547  0D9B  0800               	movf	0,w
  3548  0D9C  1903               	btfsc	3,2
  3549  0D9D  0008               	return
  3550                           
  3551                           ;lcd.h: 130: {;lcd.h: 131: Lcd_Chr_CP(*buffer);
  3552  0D9E  0874               	movf	Lcd_Out2@buffer,w
  3553  0D9F  0084               	movwf	4
  3554  0DA0  0800               	movf	0,w
  3555  0DA1  120A  118A  2091  120A  158A  	fcall	_Lcd_Chr_CP
  3556                           
  3557                           ;lcd.h: 132: buffer++;
  3558  0DA6  3001               	movlw	1
  3559  0DA7  00F5               	movwf	??_Lcd_Out2
  3560  0DA8  0875               	movf	??_Lcd_Out2,w
  3561  0DA9  07F4               	addwf	Lcd_Out2@buffer,f
  3562  0DAA  2D98               	goto	l1626
  3563  0DAB                     __end_of_Lcd_Out2:	
  3564                           
  3565                           	psect	text11
  3566  0091                     __ptext11:	
  3567 ;; *************** function _Lcd_Chr_CP *****************
  3568 ;; Defined at:
  3569 ;;		line 138 in file "lcd.h"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;  data            1    wreg     unsigned char 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  data            1    2[COMMON] unsigned char 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      void 
  3576 ;; Registers used:
  3577 ;;		wreg, status,2, status,0
  3578 ;; Tracked objects:
  3579 ;;		On entry : 800/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3583 ;;      Params:         0       0       0       0       0
  3584 ;;      Locals:         1       0       0       0       0
  3585 ;;      Temps:          2       0       0       0       0
  3586 ;;      Totals:         3       0       0       0       0
  3587 ;;Total ram usage:        3 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; This function calls:
  3590 ;;		Nothing
  3591 ;; This function is called by:
  3592 ;;		_Lcd_Out2
  3593 ;; This function uses a non-reentrant model
  3594 ;;
  3595                           
  3596                           
  3597                           ;psect for function _Lcd_Chr_CP
  3598  0091                     _Lcd_Chr_CP:	
  3599                           
  3600                           ;incstack = 0
  3601                           ; Regs used in _Lcd_Chr_CP: [wreg+status,2+status,0]
  3602                           ;Lcd_Chr_CP@data stored from wreg
  3603  0091  00F2               	movwf	Lcd_Chr_CP@data
  3604                           
  3605                           ;lcd.h: 139: PORTBbits.RB2 = 0; PORTBbits.RB0 = 1;
  3606  0092  1283               	bcf	3,5	;RP0=0, select bank0
  3607  0093  1303               	bcf	3,6	;RP1=0, select bank0
  3608  0094  1106               	bcf	6,2	;volatile
  3609  0095  1406               	bsf	6,0	;volatile
  3610                           
  3611                           ;lcd.h: 140: PORTBbits.RB7 = (data & 0b10000000)>>7; PORTBbits.RB6 = (data & 0b01000000)
      +                          >>6;
  3612  0096  0872               	movf	Lcd_Chr_CP@data,w
  3613  0097  00F0               	movwf	??_Lcd_Chr_CP
  3614  0098  3007               	movlw	7
  3615  0099                     u1135:	
  3616  0099  1003               	clrc
  3617  009A  0CF0               	rrf	??_Lcd_Chr_CP,f
  3618  009B  3EFF               	addlw	-1
  3619  009C  1D03               	skipz
  3620  009D  2899               	goto	u1135
  3621  009E  0870               	movf	??_Lcd_Chr_CP,w
  3622  009F  3901               	andlw	1
  3623  00A0  00F1               	movwf	??_Lcd_Chr_CP+1
  3624  00A1  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  3625  00A2  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  3626  00A3  0806               	movf	6,w	;volatile
  3627  00A4  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3628  00A5  397F               	andlw	-129
  3629  00A6  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3630  00A7  0086               	movwf	6	;volatile
  3631  00A8  0872               	movf	Lcd_Chr_CP@data,w
  3632  00A9  00F0               	movwf	??_Lcd_Chr_CP
  3633  00AA  3006               	movlw	6
  3634  00AB                     u1145:	
  3635  00AB  1003               	clrc
  3636  00AC  0CF0               	rrf	??_Lcd_Chr_CP,f
  3637  00AD  3EFF               	addlw	-1
  3638  00AE  1D03               	skipz
  3639  00AF  28AB               	goto	u1145
  3640  00B0  0870               	movf	??_Lcd_Chr_CP,w
  3641  00B1  3901               	andlw	1
  3642  00B2  00F1               	movwf	??_Lcd_Chr_CP+1
  3643  00B3  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  3644  00B4  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3645  00B5  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3646  00B6  0806               	movf	6,w	;volatile
  3647  00B7  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3648  00B8  39BF               	andlw	-65
  3649  00B9  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3650  00BA  0086               	movwf	6	;volatile
  3651                           
  3652                           ;lcd.h: 141: PORTBbits.RB5 = (data & 0b00100000)>>5; PORTBbits.RB4 = (data & 0b00010000)
      +                          >>4;
  3653  00BB  0872               	movf	Lcd_Chr_CP@data,w
  3654  00BC  00F0               	movwf	??_Lcd_Chr_CP
  3655  00BD  3005               	movlw	5
  3656  00BE                     u1155:	
  3657  00BE  1003               	clrc
  3658  00BF  0CF0               	rrf	??_Lcd_Chr_CP,f
  3659  00C0  3EFF               	addlw	-1
  3660  00C1  1D03               	skipz
  3661  00C2  28BE               	goto	u1155
  3662  00C3  0870               	movf	??_Lcd_Chr_CP,w
  3663  00C4  3901               	andlw	1
  3664  00C5  00F1               	movwf	??_Lcd_Chr_CP+1
  3665  00C6  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  3666  00C7  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3667  00C8  0806               	movf	6,w	;volatile
  3668  00C9  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3669  00CA  39DF               	andlw	-33
  3670  00CB  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3671  00CC  0086               	movwf	6	;volatile
  3672  00CD  0872               	movf	Lcd_Chr_CP@data,w
  3673  00CE  00F0               	movwf	??_Lcd_Chr_CP
  3674  00CF  3004               	movlw	4
  3675  00D0                     u1165:	
  3676  00D0  1003               	clrc
  3677  00D1  0CF0               	rrf	??_Lcd_Chr_CP,f
  3678  00D2  3EFF               	addlw	-1
  3679  00D3  1D03               	skipz
  3680  00D4  28D0               	goto	u1165
  3681  00D5  0870               	movf	??_Lcd_Chr_CP,w
  3682  00D6  3901               	andlw	1
  3683  00D7  00F1               	movwf	??_Lcd_Chr_CP+1
  3684  00D8  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  3685  00D9  0806               	movf	6,w	;volatile
  3686  00DA  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3687  00DB  39EF               	andlw	-17
  3688  00DC  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3689  00DD  0086               	movwf	6	;volatile
  3690                           
  3691                           ;lcd.h: 142: _delay(10);
  3692  00DE  3003               	movlw	3
  3693  00DF  00F0               	movwf	??_Lcd_Chr_CP
  3694  00E0                     u2157:	
  3695  00E0  0BF0               	decfsz	??_Lcd_Chr_CP,f
  3696  00E1  28E0               	goto	u2157
  3697                           
  3698                           ;lcd.h: 143: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(4000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  3699  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  3700  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  3701  00E4  1506               	bsf	6,2	;volatile
  3702  00E5  28E6               	nop2	;2 cycle nop
  3703  00E6  28E7               	nop2	;2 cycle nop
  3704  00E7  0000               	nop
  3705  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  3706  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  3707  00EA  1106               	bcf	6,2	;volatile
  3708                           
  3709                           ;lcd.h: 144: PORTBbits.RB7 = (data & 0b00001000)>>3; PORTBbits.RB6 = (data & 0b00000100)
      +                          >>2;
  3710  00EB  0872               	movf	Lcd_Chr_CP@data,w
  3711  00EC  00F0               	movwf	??_Lcd_Chr_CP
  3712  00ED  3003               	movlw	3
  3713  00EE                     u1175:	
  3714  00EE  1003               	clrc
  3715  00EF  0CF0               	rrf	??_Lcd_Chr_CP,f
  3716  00F0  3EFF               	addlw	-1
  3717  00F1  1D03               	skipz
  3718  00F2  28EE               	goto	u1175
  3719  00F3  0870               	movf	??_Lcd_Chr_CP,w
  3720  00F4  3901               	andlw	1
  3721  00F5  00F1               	movwf	??_Lcd_Chr_CP+1
  3722  00F6  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  3723  00F7  0CF1               	rrf	??_Lcd_Chr_CP+1,f
  3724  00F8  0806               	movf	6,w	;volatile
  3725  00F9  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3726  00FA  397F               	andlw	-129
  3727  00FB  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3728  00FC  0086               	movwf	6	;volatile
  3729  00FD  0872               	movf	Lcd_Chr_CP@data,w
  3730  00FE  00F0               	movwf	??_Lcd_Chr_CP
  3731  00FF  3002               	movlw	2
  3732  0100                     u1185:	
  3733  0100  1003               	clrc
  3734  0101  0CF0               	rrf	??_Lcd_Chr_CP,f
  3735  0102  3EFF               	addlw	-1
  3736  0103  1D03               	skipz
  3737  0104  2900               	goto	u1185
  3738  0105  0870               	movf	??_Lcd_Chr_CP,w
  3739  0106  3901               	andlw	1
  3740  0107  00F1               	movwf	??_Lcd_Chr_CP+1
  3741  0108  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  3742  0109  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3743  010A  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3744  010B  0806               	movf	6,w	;volatile
  3745  010C  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3746  010D  39BF               	andlw	-65
  3747  010E  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3748  010F  0086               	movwf	6	;volatile
  3749                           
  3750                           ;lcd.h: 145: PORTBbits.RB5 = (data & 0b00000010)>>1; PORTBbits.RB4 = (data & 0b00000001)
      +                          ;
  3751  0110  0872               	movf	Lcd_Chr_CP@data,w
  3752  0111  00F0               	movwf	??_Lcd_Chr_CP
  3753  0112  1003               	clrc
  3754  0113  0C70               	rrf	??_Lcd_Chr_CP,w
  3755  0114  3901               	andlw	1
  3756  0115  00F1               	movwf	??_Lcd_Chr_CP+1
  3757  0116  0EF1               	swapf	??_Lcd_Chr_CP+1,f
  3758  0117  0DF1               	rlf	??_Lcd_Chr_CP+1,f
  3759  0118  0806               	movf	6,w	;volatile
  3760  0119  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3761  011A  39DF               	andlw	-33
  3762  011B  0671               	xorwf	??_Lcd_Chr_CP+1,w
  3763  011C  0086               	movwf	6	;volatile
  3764  011D  0872               	movf	Lcd_Chr_CP@data,w
  3765  011E  3901               	andlw	1
  3766  011F  00F0               	movwf	??_Lcd_Chr_CP
  3767  0120  0EF0               	swapf	??_Lcd_Chr_CP,f
  3768  0121  0806               	movf	6,w	;volatile
  3769  0122  0670               	xorwf	??_Lcd_Chr_CP,w
  3770  0123  39EF               	andlw	-17
  3771  0124  0670               	xorwf	??_Lcd_Chr_CP,w
  3772  0125  0086               	movwf	6	;volatile
  3773                           
  3774                           ;lcd.h: 146: _delay(10);
  3775  0126  3003               	movlw	3
  3776  0127  00F0               	movwf	??_Lcd_Chr_CP
  3777  0128                     u2167:	
  3778  0128  0BF0               	decfsz	??_Lcd_Chr_CP,f
  3779  0129  2928               	goto	u2167
  3780                           
  3781                           ;lcd.h: 147: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(4000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  3782  012A  1283               	bcf	3,5	;RP0=0, select bank0
  3783  012B  1303               	bcf	3,6	;RP1=0, select bank0
  3784  012C  1506               	bsf	6,2	;volatile
  3785  012D  292E               	nop2	;2 cycle nop
  3786  012E  292F               	nop2	;2 cycle nop
  3787  012F  0000               	nop
  3788  0130  1283               	bcf	3,5	;RP0=0, select bank0
  3789  0131  1303               	bcf	3,6	;RP1=0, select bank0
  3790  0132  1106               	bcf	6,2	;volatile
  3791                           
  3792                           ;lcd.h: 148: _delay((unsigned long)((5)*(4000000/4000000.0))); _delay((unsigned long)((5
      +                          500)*(4000000/4000000.0)));
  3793  0133  2934               	nop2	;2 cycle nop
  3794  0134  2935               	nop2	;2 cycle nop
  3795  0135  0000               	nop
  3796  0136  3008               	movlw	8
  3797  0137  00F1               	movwf	??_Lcd_Chr_CP+1
  3798  0138  3023               	movlw	35
  3799  0139  00F0               	movwf	??_Lcd_Chr_CP
  3800  013A                     u2177:	
  3801  013A  0BF0               	decfsz	??_Lcd_Chr_CP,f
  3802  013B  293A               	goto	u2177
  3803  013C  0BF1               	decfsz	??_Lcd_Chr_CP+1,f
  3804  013D  293A               	goto	u2177
  3805  013E  0008               	return
  3806  013F                     __end_of_Lcd_Chr_CP:	
  3807                           
  3808                           	psect	text12
  3809  0EB4                     __ptext12:	
  3810 ;; *************** function _Lcd_Init *****************
  3811 ;; Defined at:
  3812 ;;		line 54 in file "lcd.h"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;		None
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;  data            1    5[COMMON] unsigned char 
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2, status,0, pclath, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 300/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3826 ;;      Params:         0       0       0       0       0
  3827 ;;      Locals:         1       0       0       0       0
  3828 ;;      Temps:          2       0       0       0       0
  3829 ;;      Totals:         3       0       0       0       0
  3830 ;;Total ram usage:        3 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    1
  3833 ;; This function calls:
  3834 ;;		_Lcd_Cmd
  3835 ;; This function is called by:
  3836 ;;		_main
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           
  3841                           ;psect for function _Lcd_Init
  3842  0EB4                     _Lcd_Init:	
  3843                           
  3844                           ;lcd.h: 55: unsigned char data;;lcd.h: 56: TRISBbits.TRISB7 = 0;
  3845                           
  3846                           ;incstack = 0
  3847                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3848  0EB4  1683               	bsf	3,5	;RP0=1, select bank1
  3849  0EB5  1386               	bcf	6,7	;volatile
  3850                           
  3851                           ;lcd.h: 57: TRISBbits.TRISB6 = 0;
  3852  0EB6  1306               	bcf	6,6	;volatile
  3853                           
  3854                           ;lcd.h: 58: TRISBbits.TRISB5 = 0;
  3855  0EB7  1286               	bcf	6,5	;volatile
  3856                           
  3857                           ;lcd.h: 59: TRISBbits.TRISB4 = 0;
  3858  0EB8  1206               	bcf	6,4	;volatile
  3859                           
  3860                           ;lcd.h: 60: TRISBbits.TRISB2 = 0;
  3861  0EB9  1106               	bcf	6,2	;volatile
  3862                           
  3863                           ;lcd.h: 61: TRISBbits.TRISB0 = 0;
  3864  0EBA  1006               	bcf	6,0	;volatile
  3865                           
  3866                           ;lcd.h: 62: PORTBbits.RB7 = 0;
  3867  0EBB  1283               	bcf	3,5	;RP0=0, select bank0
  3868  0EBC  1386               	bcf	6,7	;volatile
  3869                           
  3870                           ;lcd.h: 63: PORTBbits.RB6 = 0;
  3871  0EBD  1306               	bcf	6,6	;volatile
  3872                           
  3873                           ;lcd.h: 64: PORTBbits.RB5 = 0;
  3874  0EBE  1286               	bcf	6,5	;volatile
  3875                           
  3876                           ;lcd.h: 65: PORTBbits.RB4 = 0;
  3877  0EBF  1206               	bcf	6,4	;volatile
  3878                           
  3879                           ;lcd.h: 66: PORTBbits.RB2 = 0;
  3880  0EC0  1106               	bcf	6,2	;volatile
  3881                           
  3882                           ;lcd.h: 67: PORTBbits.RB0 = 0;
  3883  0EC1  1006               	bcf	6,0	;volatile
  3884                           
  3885                           ;lcd.h: 68: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  3886  0EC2  3008               	movlw	8
  3887  0EC3  00F4               	movwf	??_Lcd_Init+1
  3888  0EC4  3023               	movlw	35
  3889  0EC5  00F3               	movwf	??_Lcd_Init
  3890  0EC6                     u2187:	
  3891  0EC6  0BF3               	decfsz	??_Lcd_Init,f
  3892  0EC7  2EC6               	goto	u2187
  3893  0EC8  0BF4               	decfsz	??_Lcd_Init+1,f
  3894  0EC9  2EC6               	goto	u2187
  3895                           
  3896                           ;lcd.h: 69: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  3897  0ECA  3008               	movlw	8
  3898  0ECB  00F4               	movwf	??_Lcd_Init+1
  3899  0ECC  3023               	movlw	35
  3900  0ECD  00F3               	movwf	??_Lcd_Init
  3901  0ECE                     u2197:	
  3902  0ECE  0BF3               	decfsz	??_Lcd_Init,f
  3903  0ECF  2ECE               	goto	u2197
  3904  0ED0  0BF4               	decfsz	??_Lcd_Init+1,f
  3905  0ED1  2ECE               	goto	u2197
  3906                           
  3907                           ;lcd.h: 70: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  3908  0ED2  3008               	movlw	8
  3909  0ED3  00F4               	movwf	??_Lcd_Init+1
  3910  0ED4  3023               	movlw	35
  3911  0ED5  00F3               	movwf	??_Lcd_Init
  3912  0ED6                     u2207:	
  3913  0ED6  0BF3               	decfsz	??_Lcd_Init,f
  3914  0ED7  2ED6               	goto	u2207
  3915  0ED8  0BF4               	decfsz	??_Lcd_Init+1,f
  3916  0ED9  2ED6               	goto	u2207
  3917                           
  3918                           ;lcd.h: 71: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  3919  0EDA  3008               	movlw	8
  3920  0EDB  00F4               	movwf	??_Lcd_Init+1
  3921  0EDC  3023               	movlw	35
  3922  0EDD  00F3               	movwf	??_Lcd_Init
  3923  0EDE                     u2217:	
  3924  0EDE  0BF3               	decfsz	??_Lcd_Init,f
  3925  0EDF  2EDE               	goto	u2217
  3926  0EE0  0BF4               	decfsz	??_Lcd_Init+1,f
  3927  0EE1  2EDE               	goto	u2217
  3928                           
  3929                           ;lcd.h: 72: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  3930  0EE2  3008               	movlw	8
  3931  0EE3  00F4               	movwf	??_Lcd_Init+1
  3932  0EE4  3023               	movlw	35
  3933  0EE5  00F3               	movwf	??_Lcd_Init
  3934  0EE6                     u2227:	
  3935  0EE6  0BF3               	decfsz	??_Lcd_Init,f
  3936  0EE7  2EE6               	goto	u2227
  3937  0EE8  0BF4               	decfsz	??_Lcd_Init+1,f
  3938  0EE9  2EE6               	goto	u2227
  3939                           
  3940                           ;lcd.h: 73: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  3941  0EEA  3008               	movlw	8
  3942  0EEB  00F4               	movwf	??_Lcd_Init+1
  3943  0EEC  3023               	movlw	35
  3944  0EED  00F3               	movwf	??_Lcd_Init
  3945  0EEE                     u2237:	
  3946  0EEE  0BF3               	decfsz	??_Lcd_Init,f
  3947  0EEF  2EEE               	goto	u2237
  3948  0EF0  0BF4               	decfsz	??_Lcd_Init+1,f
  3949  0EF1  2EEE               	goto	u2237
  3950                           
  3951                           ;lcd.h: 74: for(data = 1; data < 4; data ++)
  3952  0EF2  01F5               	clrf	Lcd_Init@data
  3953  0EF3  0AF5               	incf	Lcd_Init@data,f
  3954  0EF4                     l41:	
  3955                           
  3956                           ;lcd.h: 75: {;lcd.h: 76: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBb
      +                          its.RB4 = 1; PORTBbits.RB2 = 0;
  3957  0EF4  1283               	bcf	3,5	;RP0=0, select bank0
  3958  0EF5  1303               	bcf	3,6	;RP1=0, select bank0
  3959  0EF6  1386               	bcf	6,7	;volatile
  3960  0EF7  1306               	bcf	6,6	;volatile
  3961  0EF8  1686               	bsf	6,5	;volatile
  3962  0EF9  1606               	bsf	6,4	;volatile
  3963  0EFA  1106               	bcf	6,2	;volatile
  3964                           
  3965                           ;lcd.h: 77: PORTBbits.RB0 = 0; PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; 
      +                          PORTBbits.RB4 = 1;
  3966  0EFB  1006               	bcf	6,0	;volatile
  3967  0EFC  1386               	bcf	6,7	;volatile
  3968  0EFD  1306               	bcf	6,6	;volatile
  3969  0EFE  1686               	bsf	6,5	;volatile
  3970  0EFF  1606               	bsf	6,4	;volatile
  3971                           
  3972                           ;lcd.h: 78: PORTBbits.RB2 = 1; PORTBbits.RB0 = 0;
  3973  0F00  1506               	bsf	6,2	;volatile
  3974  0F01  1006               	bcf	6,0	;volatile
  3975                           
  3976                           ;lcd.h: 79: _delay((unsigned long)((5)*(4000000/4000000.0)));
  3977  0F02  2F03               	nop2	;2 cycle nop
  3978  0F03  2F04               	nop2	;2 cycle nop
  3979  0F04  0000               	nop
  3980                           
  3981                           ;lcd.h: 80: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 1; 
      +                          PORTBbits.RB2 = 0;
  3982  0F05  1283               	bcf	3,5	;RP0=0, select bank0
  3983  0F06  1303               	bcf	3,6	;RP1=0, select bank0
  3984  0F07  1386               	bcf	6,7	;volatile
  3985  0F08  1306               	bcf	6,6	;volatile
  3986  0F09  1686               	bsf	6,5	;volatile
  3987  0F0A  1606               	bsf	6,4	;volatile
  3988  0F0B  1106               	bcf	6,2	;volatile
  3989                           
  3990                           ;lcd.h: 81: PORTBbits.RB0 = 0;
  3991  0F0C  1006               	bcf	6,0	;volatile
  3992                           
  3993                           ;lcd.h: 82: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  3994  0F0D  3008               	movlw	8
  3995  0F0E  00F4               	movwf	??_Lcd_Init+1
  3996  0F0F  3023               	movlw	35
  3997  0F10  00F3               	movwf	??_Lcd_Init
  3998  0F11                     u2247:	
  3999  0F11  0BF3               	decfsz	??_Lcd_Init,f
  4000  0F12  2F11               	goto	u2247
  4001  0F13  0BF4               	decfsz	??_Lcd_Init+1,f
  4002  0F14  2F11               	goto	u2247
  4003  0F15  3001               	movlw	1
  4004  0F16  00F3               	movwf	??_Lcd_Init
  4005  0F17  0873               	movf	??_Lcd_Init,w
  4006  0F18  07F5               	addwf	Lcd_Init@data,f
  4007  0F19  3004               	movlw	4
  4008  0F1A  0275               	subwf	Lcd_Init@data,w
  4009  0F1B  1C03               	skipc
  4010  0F1C  2EF4               	goto	l41
  4011                           
  4012                           ;lcd.h: 83: };lcd.h: 84: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBb
      +                          its.RB4 = 0; PORTBbits.RB2 = 0; PORTBbits.RB0 = 0;
  4013  0F1D  1283               	bcf	3,5	;RP0=0, select bank0
  4014  0F1E  1303               	bcf	3,6	;RP1=0, select bank0
  4015  0F1F  1386               	bcf	6,7	;volatile
  4016  0F20  1306               	bcf	6,6	;volatile
  4017  0F21  1686               	bsf	6,5	;volatile
  4018  0F22  1206               	bcf	6,4	;volatile
  4019  0F23  1106               	bcf	6,2	;volatile
  4020  0F24  1006               	bcf	6,0	;volatile
  4021                           
  4022                           ;lcd.h: 85: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 1; PORTBbits.RB0 = 0;
  4023  0F25  1386               	bcf	6,7	;volatile
  4024  0F26  1306               	bcf	6,6	;volatile
  4025  0F27  1686               	bsf	6,5	;volatile
  4026  0F28  1206               	bcf	6,4	;volatile
  4027  0F29  1506               	bsf	6,2	;volatile
  4028  0F2A  1006               	bcf	6,0	;volatile
  4029                           
  4030                           ;lcd.h: 86: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4031  0F2B  2F2C               	nop2	;2 cycle nop
  4032  0F2C  2F2D               	nop2	;2 cycle nop
  4033  0F2D  0000               	nop
  4034                           
  4035                           ;lcd.h: 87: PORTBbits.RB7 = 0; PORTBbits.RB6 = 0; PORTBbits.RB5 = 1; PORTBbits.RB4 = 0; 
      +                          PORTBbits.RB2 = 0; PORTBbits.RB0 = 0;
  4036  0F2E  1283               	bcf	3,5	;RP0=0, select bank0
  4037  0F2F  1303               	bcf	3,6	;RP1=0, select bank0
  4038  0F30  1386               	bcf	6,7	;volatile
  4039  0F31  1306               	bcf	6,6	;volatile
  4040  0F32  1686               	bsf	6,5	;volatile
  4041  0F33  1206               	bcf	6,4	;volatile
  4042  0F34  1106               	bcf	6,2	;volatile
  4043  0F35  1006               	bcf	6,0	;volatile
  4044                           
  4045                           ;lcd.h: 88: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4046  0F36  3008               	movlw	8
  4047  0F37  00F4               	movwf	??_Lcd_Init+1
  4048  0F38  3023               	movlw	35
  4049  0F39  00F3               	movwf	??_Lcd_Init
  4050  0F3A                     u2257:	
  4051  0F3A  0BF3               	decfsz	??_Lcd_Init,f
  4052  0F3B  2F3A               	goto	u2257
  4053  0F3C  0BF4               	decfsz	??_Lcd_Init+1,f
  4054  0F3D  2F3A               	goto	u2257
  4055  0F3E  3028               	movlw	40
  4056  0F3F  120A  158A  2755  120A  158A  	fcall	_Lcd_Cmd
  4057  0F44  3010               	movlw	16
  4058  0F45  120A  158A  2755  120A  158A  	fcall	_Lcd_Cmd
  4059  0F4A  3001               	movlw	1
  4060  0F4B  120A  158A  2755  120A  158A  	fcall	_Lcd_Cmd
  4061  0F50  300F               	movlw	15
  4062  0F51  120A  158A  2755   	fcall	_Lcd_Cmd
  4063  0F54  0008               	return
  4064  0F55                     __end_of_Lcd_Init:	
  4065                           
  4066                           	psect	text13
  4067  0F55                     __ptext13:	
  4068 ;; *************** function _Lcd_Cmd *****************
  4069 ;; Defined at:
  4070 ;;		line 152 in file "lcd.h"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  data            1    wreg     unsigned char 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  data            1    2[COMMON] unsigned char 
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      void 
  4077 ;; Registers used:
  4078 ;;		wreg, status,2, status,0
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4084 ;;      Params:         0       0       0       0       0
  4085 ;;      Locals:         1       0       0       0       0
  4086 ;;      Temps:          2       0       0       0       0
  4087 ;;      Totals:         3       0       0       0       0
  4088 ;;Total ram usage:        3 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_Lcd_Init
  4094 ;;		_Lcd_Out2
  4095 ;;		_main
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           
  4100                           ;psect for function _Lcd_Cmd
  4101  0F55                     _Lcd_Cmd:	
  4102                           
  4103                           ;incstack = 0
  4104                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0]
  4105                           ;Lcd_Cmd@data stored from wreg
  4106  0F55  00F2               	movwf	Lcd_Cmd@data
  4107                           
  4108                           ;lcd.h: 153: PORTBbits.RB2 = 0; PORTBbits.RB0 = 0;
  4109  0F56  1283               	bcf	3,5	;RP0=0, select bank0
  4110  0F57  1303               	bcf	3,6	;RP1=0, select bank0
  4111  0F58  1106               	bcf	6,2	;volatile
  4112  0F59  1006               	bcf	6,0	;volatile
  4113                           
  4114                           ;lcd.h: 154: PORTBbits.RB7 = (data & 0b10000000)>>7; PORTBbits.RB6 = (data & 0b01000000)
      +                          >>6;
  4115  0F5A  0872               	movf	Lcd_Cmd@data,w
  4116  0F5B  00F0               	movwf	??_Lcd_Cmd
  4117  0F5C  3007               	movlw	7
  4118  0F5D                     u1075:	
  4119  0F5D  1003               	clrc
  4120  0F5E  0CF0               	rrf	??_Lcd_Cmd,f
  4121  0F5F  3EFF               	addlw	-1
  4122  0F60  1D03               	skipz
  4123  0F61  2F5D               	goto	u1075
  4124  0F62  0870               	movf	??_Lcd_Cmd,w
  4125  0F63  3901               	andlw	1
  4126  0F64  00F1               	movwf	??_Lcd_Cmd+1
  4127  0F65  0CF1               	rrf	??_Lcd_Cmd+1,f
  4128  0F66  0CF1               	rrf	??_Lcd_Cmd+1,f
  4129  0F67  0806               	movf	6,w	;volatile
  4130  0F68  0671               	xorwf	??_Lcd_Cmd+1,w
  4131  0F69  397F               	andlw	-129
  4132  0F6A  0671               	xorwf	??_Lcd_Cmd+1,w
  4133  0F6B  0086               	movwf	6	;volatile
  4134  0F6C  0872               	movf	Lcd_Cmd@data,w
  4135  0F6D  00F0               	movwf	??_Lcd_Cmd
  4136  0F6E  3006               	movlw	6
  4137  0F6F                     u1085:	
  4138  0F6F  1003               	clrc
  4139  0F70  0CF0               	rrf	??_Lcd_Cmd,f
  4140  0F71  3EFF               	addlw	-1
  4141  0F72  1D03               	skipz
  4142  0F73  2F6F               	goto	u1085
  4143  0F74  0870               	movf	??_Lcd_Cmd,w
  4144  0F75  3901               	andlw	1
  4145  0F76  00F1               	movwf	??_Lcd_Cmd+1
  4146  0F77  0EF1               	swapf	??_Lcd_Cmd+1,f
  4147  0F78  0DF1               	rlf	??_Lcd_Cmd+1,f
  4148  0F79  0DF1               	rlf	??_Lcd_Cmd+1,f
  4149  0F7A  0806               	movf	6,w	;volatile
  4150  0F7B  0671               	xorwf	??_Lcd_Cmd+1,w
  4151  0F7C  39BF               	andlw	-65
  4152  0F7D  0671               	xorwf	??_Lcd_Cmd+1,w
  4153  0F7E  0086               	movwf	6	;volatile
  4154                           
  4155                           ;lcd.h: 155: PORTBbits.RB5 = (data & 0b00100000)>>5; PORTBbits.RB4 = (data & 0b00010000)
      +                          >>4;
  4156  0F7F  0872               	movf	Lcd_Cmd@data,w
  4157  0F80  00F0               	movwf	??_Lcd_Cmd
  4158  0F81  3005               	movlw	5
  4159  0F82                     u1095:	
  4160  0F82  1003               	clrc
  4161  0F83  0CF0               	rrf	??_Lcd_Cmd,f
  4162  0F84  3EFF               	addlw	-1
  4163  0F85  1D03               	skipz
  4164  0F86  2F82               	goto	u1095
  4165  0F87  0870               	movf	??_Lcd_Cmd,w
  4166  0F88  3901               	andlw	1
  4167  0F89  00F1               	movwf	??_Lcd_Cmd+1
  4168  0F8A  0EF1               	swapf	??_Lcd_Cmd+1,f
  4169  0F8B  0DF1               	rlf	??_Lcd_Cmd+1,f
  4170  0F8C  0806               	movf	6,w	;volatile
  4171  0F8D  0671               	xorwf	??_Lcd_Cmd+1,w
  4172  0F8E  39DF               	andlw	-33
  4173  0F8F  0671               	xorwf	??_Lcd_Cmd+1,w
  4174  0F90  0086               	movwf	6	;volatile
  4175  0F91  0872               	movf	Lcd_Cmd@data,w
  4176  0F92  00F0               	movwf	??_Lcd_Cmd
  4177  0F93  3004               	movlw	4
  4178  0F94                     u1105:	
  4179  0F94  1003               	clrc
  4180  0F95  0CF0               	rrf	??_Lcd_Cmd,f
  4181  0F96  3EFF               	addlw	-1
  4182  0F97  1D03               	skipz
  4183  0F98  2F94               	goto	u1105
  4184  0F99  0870               	movf	??_Lcd_Cmd,w
  4185  0F9A  3901               	andlw	1
  4186  0F9B  00F1               	movwf	??_Lcd_Cmd+1
  4187  0F9C  0EF1               	swapf	??_Lcd_Cmd+1,f
  4188  0F9D  0806               	movf	6,w	;volatile
  4189  0F9E  0671               	xorwf	??_Lcd_Cmd+1,w
  4190  0F9F  39EF               	andlw	-17
  4191  0FA0  0671               	xorwf	??_Lcd_Cmd+1,w
  4192  0FA1  0086               	movwf	6	;volatile
  4193                           
  4194                           ;lcd.h: 156: _delay(10);
  4195  0FA2  3003               	movlw	3
  4196  0FA3  00F0               	movwf	??_Lcd_Cmd
  4197  0FA4                     u2267:	
  4198  0FA4  0BF0               	decfsz	??_Lcd_Cmd,f
  4199  0FA5  2FA4               	goto	u2267
  4200                           
  4201                           ;lcd.h: 157: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(4000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  4202  0FA6  1283               	bcf	3,5	;RP0=0, select bank0
  4203  0FA7  1303               	bcf	3,6	;RP1=0, select bank0
  4204  0FA8  1506               	bsf	6,2	;volatile
  4205  0FA9  2FAA               	nop2	;2 cycle nop
  4206  0FAA  2FAB               	nop2	;2 cycle nop
  4207  0FAB  0000               	nop
  4208  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  4209  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  4210  0FAE  1106               	bcf	6,2	;volatile
  4211                           
  4212                           ;lcd.h: 158: PORTBbits.RB7 = (data & 0b00001000)>>3; PORTBbits.RB6 = (data & 0b00000100)
      +                          >>2;
  4213  0FAF  0872               	movf	Lcd_Cmd@data,w
  4214  0FB0  00F0               	movwf	??_Lcd_Cmd
  4215  0FB1  3003               	movlw	3
  4216  0FB2                     u1115:	
  4217  0FB2  1003               	clrc
  4218  0FB3  0CF0               	rrf	??_Lcd_Cmd,f
  4219  0FB4  3EFF               	addlw	-1
  4220  0FB5  1D03               	skipz
  4221  0FB6  2FB2               	goto	u1115
  4222  0FB7  0870               	movf	??_Lcd_Cmd,w
  4223  0FB8  3901               	andlw	1
  4224  0FB9  00F1               	movwf	??_Lcd_Cmd+1
  4225  0FBA  0CF1               	rrf	??_Lcd_Cmd+1,f
  4226  0FBB  0CF1               	rrf	??_Lcd_Cmd+1,f
  4227  0FBC  0806               	movf	6,w	;volatile
  4228  0FBD  0671               	xorwf	??_Lcd_Cmd+1,w
  4229  0FBE  397F               	andlw	-129
  4230  0FBF  0671               	xorwf	??_Lcd_Cmd+1,w
  4231  0FC0  0086               	movwf	6	;volatile
  4232  0FC1  0872               	movf	Lcd_Cmd@data,w
  4233  0FC2  00F0               	movwf	??_Lcd_Cmd
  4234  0FC3  3002               	movlw	2
  4235  0FC4                     u1125:	
  4236  0FC4  1003               	clrc
  4237  0FC5  0CF0               	rrf	??_Lcd_Cmd,f
  4238  0FC6  3EFF               	addlw	-1
  4239  0FC7  1D03               	skipz
  4240  0FC8  2FC4               	goto	u1125
  4241  0FC9  0870               	movf	??_Lcd_Cmd,w
  4242  0FCA  3901               	andlw	1
  4243  0FCB  00F1               	movwf	??_Lcd_Cmd+1
  4244  0FCC  0EF1               	swapf	??_Lcd_Cmd+1,f
  4245  0FCD  0DF1               	rlf	??_Lcd_Cmd+1,f
  4246  0FCE  0DF1               	rlf	??_Lcd_Cmd+1,f
  4247  0FCF  0806               	movf	6,w	;volatile
  4248  0FD0  0671               	xorwf	??_Lcd_Cmd+1,w
  4249  0FD1  39BF               	andlw	-65
  4250  0FD2  0671               	xorwf	??_Lcd_Cmd+1,w
  4251  0FD3  0086               	movwf	6	;volatile
  4252                           
  4253                           ;lcd.h: 159: PORTBbits.RB5 = (data & 0b00000010)>>1; PORTBbits.RB4 = (data & 0b00000001)
      +                          ;
  4254  0FD4  0872               	movf	Lcd_Cmd@data,w
  4255  0FD5  00F0               	movwf	??_Lcd_Cmd
  4256  0FD6  1003               	clrc
  4257  0FD7  0C70               	rrf	??_Lcd_Cmd,w
  4258  0FD8  3901               	andlw	1
  4259  0FD9  00F1               	movwf	??_Lcd_Cmd+1
  4260  0FDA  0EF1               	swapf	??_Lcd_Cmd+1,f
  4261  0FDB  0DF1               	rlf	??_Lcd_Cmd+1,f
  4262  0FDC  0806               	movf	6,w	;volatile
  4263  0FDD  0671               	xorwf	??_Lcd_Cmd+1,w
  4264  0FDE  39DF               	andlw	-33
  4265  0FDF  0671               	xorwf	??_Lcd_Cmd+1,w
  4266  0FE0  0086               	movwf	6	;volatile
  4267  0FE1  0872               	movf	Lcd_Cmd@data,w
  4268  0FE2  3901               	andlw	1
  4269  0FE3  00F0               	movwf	??_Lcd_Cmd
  4270  0FE4  0EF0               	swapf	??_Lcd_Cmd,f
  4271  0FE5  0806               	movf	6,w	;volatile
  4272  0FE6  0670               	xorwf	??_Lcd_Cmd,w
  4273  0FE7  39EF               	andlw	-17
  4274  0FE8  0670               	xorwf	??_Lcd_Cmd,w
  4275  0FE9  0086               	movwf	6	;volatile
  4276                           
  4277                           ;lcd.h: 160: _delay(10);
  4278  0FEA  3003               	movlw	3
  4279  0FEB  00F0               	movwf	??_Lcd_Cmd
  4280  0FEC                     u2277:	
  4281  0FEC  0BF0               	decfsz	??_Lcd_Cmd,f
  4282  0FED  2FEC               	goto	u2277
  4283                           
  4284                           ;lcd.h: 161: PORTBbits.RB2 = 1; _delay((unsigned long)((5)*(4000000/4000000.0))); PORTBb
      +                          its.RB2 = 0;
  4285  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  4286  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  4287  0FF0  1506               	bsf	6,2	;volatile
  4288  0FF1  2FF2               	nop2	;2 cycle nop
  4289  0FF2  2FF3               	nop2	;2 cycle nop
  4290  0FF3  0000               	nop
  4291  0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  4292  0FF5  1303               	bcf	3,6	;RP1=0, select bank0
  4293  0FF6  1106               	bcf	6,2	;volatile
  4294                           
  4295                           ;lcd.h: 162: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4296  0FF7  3008               	movlw	8
  4297  0FF8  00F1               	movwf	??_Lcd_Cmd+1
  4298  0FF9  3023               	movlw	35
  4299  0FFA  00F0               	movwf	??_Lcd_Cmd
  4300  0FFB                     u2287:	
  4301  0FFB  0BF0               	decfsz	??_Lcd_Cmd,f
  4302  0FFC  2FFB               	goto	u2287
  4303  0FFD  0BF1               	decfsz	??_Lcd_Cmd+1,f
  4304  0FFE  2FFB               	goto	u2287
  4305  0FFF  0008               	return
  4306  1000                     __end_of_Lcd_Cmd:	
  4307  007E                     btemp	set	126	;btemp
  4308  007E                     wtemp0	set	126


Data Sizes:
    Strings     71
    Constant    18
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     60      64
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_31(CODE[7]), ?_sprintf(BANK0[2]), STR_29(CODE[1]), STR_27(CODE[1]), 
		 -> STR_25(CODE[1]), STR_23(CODE[2]), STR_21(CODE[2]), STR_19(CODE[1]), 
		 -> STR_17(CODE[1]), STR_15(CODE[2]), STR_12(CODE[6]), STR_10(CODE[1]), 
		 -> STR_8(CODE[1]), STR_6(CODE[2]), STR_4(CODE[1]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 9
		 -> STR_30(CODE[9]), STR_28(CODE[2]), STR_26(CODE[2]), STR_24(CODE[2]), 
		 -> STR_22(CODE[2]), STR_20(CODE[2]), STR_18(CODE[2]), STR_16(CODE[2]), 
		 -> STR_14(CODE[2]), STR_13(CODE[9]), STR_11(CODE[4]), STR_9(CODE[2]), 
		 -> STR_7(CODE[2]), STR_5(CODE[2]), STR_3(CODE[2]), STR_2(CODE[7]), 
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> main@imagenRaton(BANK0[3]), main@blanco(BANK0[3]), main@imagenGato(BANK0[3]), main@iconAtrapado(BANK0[3]), 
		 -> main@iconVidas(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Out2@buffer	PTR unsigned char  size(1) Largest target is 8
		 -> main@imagenRaton(BANK0[3]), main@blanco(BANK0[3]), main@imagenGato(BANK0[3]), main@iconAtrapado(BANK0[3]), 
		 -> main@iconVidas(BANK0[8]), 


Critical Paths under _main in COMMON

    _main->___awmod
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _rand->___lmul
    _Lcd_Out2->_Lcd_Chr_CP
    _Lcd_Out2->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd

Critical Paths under _main in BANK0

    _main->_sprintf
    ___awmod->_rand

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                39    39      0   10719
                                             21 BANK0     39    39      0
                            _Lcd_Cmd
                           _Lcd_Init
                           _Lcd_Out2
                            ___awmod
                               _rand
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    22      3    4832
                                              0 BANK0     21    18      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     156
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     220
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     220
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     680
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Out2                                             5     3      2    2837
                                              3 COMMON     5     3      2
                         _Lcd_Chr_CP
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Chr_CP                                           3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             3     3      0     314
                                              3 COMMON     3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     176
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Cmd
   _Lcd_Init
     _Lcd_Cmd
   _Lcd_Out2
     _Lcd_Chr_CP
     _Lcd_Cmd
   ___awmod
     _rand (ARG)
       ___lmul
   _rand
     ___lmul
   _sprintf
     ___bmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     3C      40       5       80.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4E      12        0.0%
ABS                  0      0      4E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Sep 04 13:47:16 2019

                       pc 0002            ___bmul@product 0072               __CFG_CP$OFF 0000  
                      l41 0EF4                        l80 01EB                        l92 03FD  
                      l93 0366                        l88 02E9                        fsr 0004  
     ___wmul@multiplicand 0072                       l200 049A                       l202 049C  
                     l204 04AF                       l221 0537                       l219 0605  
                     l252 065B                       l247 0637                       l290 007A  
                     _RA7 002F                       _RE0 0048                       _RE1 0049  
            __CFG_CPD$OFF 0000                       fsr0 0004                       indf 0000  
            ___awmod@sign 002C              __CFG_LVP$OFF 0000                      l2002 02C7  
                    l2022 0326                      l2030 0362                      l2006 02E5  
                    l2050 03C1                      l1510 0E05                      l1520 0D32  
                    l1610 0D78                      l1506 0DEF                      l1612 0D7B  
                    l1620 0D92                      l1524 0D38                      l1614 0D7E  
                    l1550 0DD7                      l1542 0DB3                      l1710 058C  
                    l1608 0D75                      l1544 0DC1                      l1720 05A7  
                    l1704 057B                      l1626 0D98                      l1618 0D84  
                    l1554 0DE2                      l1810 06FF                      l1730 05CF  
                    l1714 058F                      l1900 0E9C                      l1572 0D63  
                    l1492 0072                      l1820 0714                      l1812 0703  
                    l1804 06E6                      l1708 058A                      l1660 04C5  
                    l1652 04A1                      l1644 0495                      l1566 0D47  
                    l1486 0D2E                      l1806 06EA                      l1750 061F  
                    l1734 05DA                      l1718 059A                      l1726 05C0  
                    l1646 049D                      l1904 0EA7                      l1568 0D55  
                    l1576 0D6E                      l1832 072F                      l1680 050B  
                    l1656 04B5                      l1754 062B                      l1738 05E7  
                    l1682 0535                      l1908 0EAF                      l1852 07A1  
                    l1844 074A                      l1828 072A                      l1764 0639  
                    l1692 054E                      l1684 0539                      l1668 04FB  
                    l1862 07C9                      l1846 0776                      l1854 07AA  
                    l1838 0744                      l1774 065D                      l1782 067F  
                    l1870 07E1                      l1792 06B5                      l1784 0688  
                    l1696 0550                      l1882 0E73                      l1858 07B5  
                    l1698 0566                      l1970 0213                      l1788 069D  
                    l1868 0473                      l1894 0E80                      l1886 0E7A  
                    l1798 06C5                      l1990 029A                      l1896 0E8E  
                    l1994 02A7                      STR_1 0048                      STR_2 0057  
                    STR_3 0068                      STR_4 003E                      STR_5 003D  
                    STR_6 003D                      STR_7 0068                      STR_8 003E  
                    STR_9 006A                      u1105 0F94                      u1115 0FB2  
                    u1125 0FC4                      u1135 0099                      u1145 00AB  
                    u1225 007B                      u2025 0243                      u1075 0F5D  
                    u1155 00BE                      u1235 0082                      u2115 03B9  
                    u2035 0294                      u1085 0F6F                      u1165 00D0  
                    u1405 0D4A                      u2125 0405     main@AuxPosAnteriorGat 004D  
                    u1095 0F82                      u2207 0ED6                      u1175 00EE  
                    u1335 0DB6                      u2217 0EDE                      u1185 0100  
                    u1425 0D5B                      u2137 0191                      u2227 0EE6  
                    u1275 0E07                      u1355 0DC2                      u1435 0D64  
                    u2147 0412                      u2237 0EEE                      u2157 00E0  
                    u1285 0E0F                      u1365 0DCE                      u2085 031E  
                    u2247 0F11                      u2167 0128                      u1375 0DD8  
                    u2257 0F3A                      u2177 013A                      u1705 0674  
                    u2267 0FA4                      u2187 0EC6                      u1475 0E5B  
                    u2277 0FEC                      u2197 0ECE                      u1725 0694  
                    u2287 0FFB                      u1735 06AD                      u1575 0574  
                    u1585 0581                      u1685 0650                      u1775 06D6  
                    u1785 06F1                      u1955 0E83                      u1975 0E94  
                    u1895 07C7                      u1985 0E9D     main@AuxPosAnteriorRat 0038  
                    _TMR1 000E              __CFG_WRT$OFF 0000               main@jumpRat 0046  
                    _main 013F                      _rand 0E26                      btemp 007E  
                    start 0000             __CFG_IESO$OFF 0000           __end_of_Lcd_Cmd 1000  
       ___bmul@multiplier 0073             __CFG_MCLRE$ON 0000                _Lcd_Chr_CP 0091  
          Lcd_Out2@buffer 0074              main@atrapado 0044                     ?_main 0070  
                   ?_rand 0020                     STR_10 003E                     STR_11 0064  
                   STR_20 003D                     STR_12 005E                     STR_21 003D  
                   STR_13 0036                     STR_22 003D                     STR_14 003D  
                   STR_30 003F                     STR_23 003D                     STR_15 003D  
                   STR_31 0050                     STR_24 0068                     STR_16 0068  
                   STR_32 0025                     STR_25 003E                     STR_17 003E  
           __CFG_WDTE$OFF 0000                     STR_26 006A                     STR_18 006A  
                   STR_27 003E                     STR_19 003E                     STR_28 0068  
         __end_of___awmod 0EB4                     STR_29 003E                     _ANSEL 0188  
                   _T1CON 0010           __end_of___lwdiv 0DE7           __end_of___lwmod 0D73  
                   _TRISB 0086                     _TRISE 0089       ___lmul@multiplicand 0074  
          __CFG_FCMEN$OFF 0000           __end_of_dpowers 001D           __end_of_isdigit 0D30  
                   _randx 005C              main@vidasGat 004B            __CFG_BOREN$OFF 0000  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 07E6          __end_of_Lcd_Init 0F55          __end_of_Lcd_Out2 0DAB  
         __initialization 07E6              __end_of_main 046E              __end_of_rand 0E69  
                  ??_main 0035                    ??_rand 0022             main@iconVidas 003C  
                  _ANSELH 0189                    _INTCON 000B                 ??_Lcd_Cmd 0070  
          __CFG_PWRTE$OFF 0000                    ___bmul 0D30                    ___lmul 0DE7  
             ?_Lcd_Chr_CP 0070                    ___wmul 0070                 ??___awmod 007D  
               ??___lwdiv 0074                 ??___lwmod 007C           ___awmod@divisor 0027  
         ___awmod@counter 002B                 ??_isdigit 0070                 ??_sprintf 0023  
 __end_of__initialization 07FC       ___bmul@multiplicand 0070            __pcstackCOMMON 0070  
            __pidataBANK0 006C                 ?_Lcd_Init 0070                 ?_Lcd_Out2 0073  
        main@iconAtrapado 0048              sprintf@width 0031       __size_of_Lcd_Chr_CP 00AE  
              __pmaintext 013F                   ?___bmul 0070                   ?___lmul 0070  
                 ?___wmul 0070            main@imagenGato 0055            ___lmul@product 0079  
              ??_Lcd_Init 0073                ??_Lcd_Out2 0075                __stringtab 0003  
                 _Lcd_Cmd 0F55           __size_of___bmul 0011           __size_of___lmul 003F  
                 ___awmod 0E69           __size_of___wmul 0021                   ___lwdiv 0DAB  
                 ___lwmod 0D41                   __ptext1 046E                   __ptext2 0D22  
                 __ptext3 0070                   __ptext4 0D41                   __ptext5 0DAB  
                 __ptext6 0D30                   __ptext7 0E26                   __ptext8 0DE7  
                 __ptext9 0E69         __end_of_hexpowers 0025                   _dpowers 0013  
                 _isdigit 0D22          ___awmod@dividend 0029                   _sprintf 046E  
                 main@var 003A      end_of_initialization 07FC              ??_Lcd_Chr_CP 0070  
               Lcd_Out2@x 0073                 Lcd_Out2@y 0076                 _PORTBbits 0006  
               _TRISBbits 0086        __end_of_Lcd_Chr_CP 013F                main@blanco 0052  
              main@posGat 005A                main@posRat 0058            __end_of___bmul 0D41  
          __end_of___lmul 0E26            __end_of___wmul 0091       start_initialization 07E6  
       __size_of_Lcd_Init 00A1         __size_of_Lcd_Out2 0038  __CFG_FOSC$INTRC_NOCLKOUT 0000  
                ??___bmul 0071                  ??___lmul 0078                  ??___wmul 0074  
             __pdataBANK0 005C                 ___latbits 0002             __pcstackBANK0 0020  
                ?_Lcd_Cmd 0070               sprintf@flag 002F               sprintf@prec 002E  
        ___lwdiv@dividend 0072                  ?___awmod 0027                  ?___lwdiv 0070  
                ?___lwmod 0078                 __pstrings 0003           main@imagenRaton 004F  
                ?_isdigit 0070                 _hexpowers 001D          ___lwdiv@quotient 0075  
                ?_sprintf 0020            ___wmul@product 0074                  _PIE1bits 008C  
                _PIR1bits 000C              Lcd_Init@data 0075               __stringbase 0012  
       ___wmul@multiplier 0070              Lcd_Out2@data 0077                  _Lcd_Init 0EB4  
                _Lcd_Out2 0D73         ___lmul@multiplier 0070          __size_of_Lcd_Cmd 00AB  
        __size_of___awmod 004B          __size_of___lwdiv 003C          __size_of___lwmod 0032  
      __end_of__stringtab 0013               _isdigit$643 0070                sprintf@idx 0026  
              sprintf@len 002A                sprintf@val 002C          __size_of_isdigit 000E  
          Lcd_Chr_CP@data 0072           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 0D73                  __ptext11 0091                  __ptext12 0EB4  
                __ptext13 0F55         __CFG_BOR4V$BOR40V 0000          __size_of_sprintf 0378  
             Lcd_Cmd@data 0072             __size_of_main 032F             __size_of_rand 0043  
                isdigit@c 0071                 sprintf@ap 0029                 sprintf@cp 0027  
               sprintf@sp 0034          ___lwmod@dividend 007A                 stringcode 000D  
                sprintf@c 0033                  sprintf@f 0020           ___lwmod@divisor 0078  
         ___lwmod@counter 007D                  stringdir 000D                  stringtab 0003  
